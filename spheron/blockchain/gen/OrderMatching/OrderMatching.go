// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package OrderMatching

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// OrderMatchingBid is an auto generated low-level Go binding around an user-defined struct.
type OrderMatchingBid struct {
	OrderId  uint64
	BidPrice *big.Int
	Bidder   common.Address
}

// OrderMatchingLease is an auto generated low-level Go binding around an user-defined struct.
type OrderMatchingLease struct {
	ProviderAddress common.Address
	TenantAddress   common.Address
	ProviderId      *big.Int
	AcceptedPrice   *big.Int
	StartBlock      *big.Int
	StartTime       *big.Int
	EndBlock        *big.Int
	EndTime         *big.Int
	State           uint8
}

// OrderMatchingMetaData contains all meta data concerning the OrderMatching contract.
var OrderMatchingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeProviderRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authorizedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAuthorizedAddress\",\"type\":\"address\"}],\"name\":\"AuthorizedAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"orderId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"orderId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"providerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tenantAddress\",\"type\":\"address\"}],\"name\":\"OrderClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"orderId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"orderId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"providerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"providerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acceptedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"OrderMatched\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authorizedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"orderId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_orderId\",\"type\":\"uint64\"}],\"name\":\"closeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_region\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_uptime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_reputation\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_slashes\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_token\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_spec\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_orderId\",\"type\":\"uint64\"}],\"name\":\"getAllBidsForOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"orderId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"internalType\":\"structOrderMatching.Bid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_orderId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getBid\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"orderId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"internalType\":\"structOrderMatching.Bid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_orderId\",\"type\":\"uint64\"}],\"name\":\"getOrderById\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"providerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenantAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"providerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"enumOrderMatching.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"structOrderMatching.Lease\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_providerAddress\",\"type\":\"address\"}],\"name\":\"getOrderByProvider\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"leases\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"providerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenantAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"providerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"enumOrderMatching.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_orderId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_providerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_acceptedPrice\",\"type\":\"uint256\"}],\"name\":\"matchOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeProviderRegistry\",\"outputs\":[{\"internalType\":\"contractINodeProviderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"uptime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"reputation\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slashes\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"enumOrderMatching.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"specs\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_orderId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_bidPrice\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAuthorizedAddress\",\"type\":\"address\"}],\"name\":\"updateAuthorizedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405260015f806101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550348015610037575f80fd5b506040516135893803806135898339818101604052810190610059919061017e565b3360055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506101bc565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61014d82610124565b9050919050565b61015d81610143565b8114610167575f80fd5b50565b5f8151905061017881610154565b92915050565b5f806040838503121561019457610193610120565b5b5f6101a18582860161016a565b92505060206101b28582860161016a565b9150509250929050565b6133c0806101c95f395ff3fe608060405234801561000f575f80fd5b50600436106100f3575f3560e01c8063638d7dec11610095578063a469dffa11610064578063a469dffa1461028b578063b930807d146102c6578063f313fc44146102f6578063fd2e5a2314610326576100f3565b8063638d7dec146102035780636582972e146102335780637a544ad3146102515780638da5cb5b1461026d576100f3565b80634c7f3c79116100d15780634c7f3c79146101755780634fd2edbb146101ad5780635539d400146101c957806359e7bf4b146101e7576100f3565b8063268c3384146100f757806328d389bc1461012757806347d4f8f214610143575b5f80fd5b610111600480360381019061010c9190611ed3565b610342565b60405161011e919061204c565b60405180910390f35b610141600480360381019061013c9190612096565b610452565b005b61015d600480360381019061015891906120eb565b61055b565b60405161016c93929190612156565b60405180910390f35b61018f600480360381019061018a9190611ed3565b6105cd565b6040516101a4999897969594939291906121fe565b60405180910390f35b6101c760048036038101906101c29190612289565b610661565b005b6101d1610c4b565b6040516101de91906122d9565b60405180910390f35b61020160048036038101906101fc919061242e565b610c70565b005b61021d60048036038101906102189190612096565b610e9b565b60405161022a91906125f7565b60405180910390f35b61023b610f61565b6040516102489190612672565b60405180910390f35b61026b60048036038101906102669190611ed3565b610f86565b005b6102756113af565b60405161028291906122d9565b60405180910390f35b6102a560048036038101906102a09190611ed3565b6113d4565b6040516102bd9c9b9a999897969594939291906126eb565b60405180910390f35b6102e060048036038101906102db9190611ed3565b6116c2565b6040516102ed9190612883565b60405180910390f35b610310600480360381019061030b919061289d565b611821565b60405161031d919061204c565b60405180910390f35b610340600480360381019061033b91906120eb565b611abe565b005b606060025f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015610447578382905f5260205f2090600302016040518060600160405290815f82015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160018201548152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190610388565b505050509050919050565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d89061294b565b60405180910390fd5b8060065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fe12f594f8990d16225e1238de64b5ef16fbe78fbb1a70f64e3a82274e9554c0a8160405161055091906122d9565b60405180910390a150565b6002602052815f5260405f208181548110610574575f80fd5b905f5260205f2090600302015f9150915050805f015f9054906101000a900467ffffffffffffffff1690806001015490806002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b6003602052805f5260405f205f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002015490806003015490806004015490806005015490806006015490806007015490806008015f9054906101000a900460ff16905089565b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e7906129d9565b60405180910390fd5b5f60015f8567ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1603610776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076d90612a41565b60405180910390fd5b5f60038111156107895761078861218b565b5b60015f8567ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f2060050160149054906101000a900460ff1660038111156107d1576107d061218b565b5b14610811576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080890612aa9565b60405180910390fd5b5f8060075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166368efbce3856040518263ffffffff1660e01b815260040161086d91906122d9565b5f60405180830381865afa158015610887573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906108af9190612b92565b935050509150806108f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ec90612c82565b60405180910390fd5b5f6040518061012001604052808673ffffffffffffffffffffffffffffffffffffffff16815260200160015f8967ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f206005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018581526020014381526020014281526020015f81526020015f8152602001600160038111156109b9576109b861218b565b5b81525090508060035f8867ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070155610100820151816008015f6101000a81548160ff02191690836003811115610ad557610ad461218b565b5b021790555090505060045f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2086908060018154018082558091505060019003905f5260205f2090600491828204019190066008029091909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600360015f8867ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f2060050160146101000a81548160ff02191690836003811115610bb857610bb761218b565b5b02179055507f34a0a9be1e394eebf0df0c0a87e3274087ba73ca31bc3aad57ba3b3c1964e57a8686858760015f8c67ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f206005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610c3b959493929190612ca0565b60405180910390a1505050505050565b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f805f81819054906101000a900467ffffffffffffffff1680929190610c9590612d1e565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555090505f60015f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f20905081815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555089816001019081610d1f9190612f3e565b5088816002015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550878160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550868160020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555085816003018190555084816004019081610dba9190612f3e565b5033816005015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505f8160050160146101000a81548160ff02191690836003811115610e2457610e2361218b565b5b021790555083816006019081610e3a9190612f3e565b5082816007019081610e4c9190612f3e565b504381600801819055507ff6d615e0ac14f850566a4da04d15354f4cb2905914851da711769c53418d93898233604051610e8792919061300d565b60405180910390a150505050505050505050565b606060045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805480602002602001604051908101604052809291908181526020018280548015610f5557602002820191905f5260205f20905f905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411610f105790505b50505050509050919050565b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f60015f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff160361100c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100390612a41565b60405180910390fd5b600160038111156110205761101f61218b565b5b60035f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f206008015f9054906101000a900460ff1660038111156110675761106661218b565b5b14806110ca57505f60038111156110815761108061218b565b5b60035f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f206008015f9054906101000a900460ff1660038111156110c8576110c761218b565b5b145b611109576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611100906130a4565b60405180910390fd5b60015f8267ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f206005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806111fb575060035f8267ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61123a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123190613132565b60405180910390fd5b600260035f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f206008015f6101000a81548160ff021916908360038111156112855761128461218b565b5b02179055504360035f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f20600601819055504260035f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f20600701819055507fe200291efe00263f5b00da992cddbf04dc5db5dbb370a57905e9b12396202f718160035f8467ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660035f8567ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516113a493929190613150565b60405180910390a150565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001602052805f5260405f205f91509050805f015f9054906101000a900467ffffffffffffffff169080600101805461140c90612d7a565b80601f016020809104026020016040519081016040528092919081815260200182805461143890612d7a565b80156114835780601f1061145a57610100808354040283529160200191611483565b820191905f5260205f20905b81548152906001019060200180831161146657829003601f168201915b505050505090806002015f9054906101000a900467ffffffffffffffff16908060020160089054906101000a900467ffffffffffffffff16908060020160109054906101000a900467ffffffffffffffff16908060030154908060040180546114eb90612d7a565b80601f016020809104026020016040519081016040528092919081815260200182805461151790612d7a565b80156115625780601f1061153957610100808354040283529160200191611562565b820191905f5260205f20905b81548152906001019060200180831161154557829003601f168201915b505050505090806005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160149054906101000a900460ff16908060060180546115af90612d7a565b80601f01602080910402602001604051908101604052809291908181526020018280546115db90612d7a565b80156116265780601f106115fd57610100808354040283529160200191611626565b820191905f5260205f20905b81548152906001019060200180831161160957829003601f168201915b50505050509080600701805461163b90612d7a565b80601f016020809104026020016040519081016040528092919081815260200182805461166790612d7a565b80156116b25780601f10611689576101008083540402835291602001916116b2565b820191905f5260205f20905b81548152906001019060200180831161169557829003601f168201915b505050505090806008015490508c565b6116ca611dc6565b60035f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f20604051806101200160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015f9054906101000a900460ff1660038111156118045761180361218b565b5b60038111156118165761181561218b565b5b815250509050919050565b60605f60025f8567ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015611927578382905f5260205f2090600302016040518060600160405290815f82015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200160018201548152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190611868565b5050505090505f805b82518110156119a6578473ffffffffffffffffffffffffffffffffffffffff1683828151811061196357611962613185565b5b60200260200101516040015173ffffffffffffffffffffffffffffffffffffffff1603611999578180611995906131b2565b9250505b8080600101915050611930565b505f8167ffffffffffffffff8111156119c2576119c161230a565b5b6040519080825280602002602001820160405280156119fb57816020015b6119e8611e47565b8152602001906001900390816119e05790505b5090505f805b8451811015611ab0578673ffffffffffffffffffffffffffffffffffffffff16858281518110611a3457611a33613185565b5b60200260200101516040015173ffffffffffffffffffffffffffffffffffffffff1603611aa357848181518110611a6e57611a6d613185565b5b6020026020010151838381518110611a8957611a88613185565b5b60200260200101819052508180611a9f906131b2565b9250505b8080600101915050611a01565b508194505050505092915050565b60015f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f2060030154811115611b29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2090613243565b60405180910390fd5b600860015f8467ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f2060080154611b5e9190613261565b431115611ba0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b97906132de565b60405180910390fd5b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166368efbce3336040518263ffffffff1660e01b8152600401611bfb91906122d9565b5f60405180830381865afa158015611c15573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611c3d9190612b92565b935050505080611c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c799061336c565b60405180910390fd5b60025f8467ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f2060405180606001604052808567ffffffffffffffff1681526020018481526020013373ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003905f5260205f2090600302015f909190919091505f820151815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550602082015181600101556040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050507f3a15efc4974c5d6dc4b1c18daba29785cc2d9ae521ad82862e6d32b414b4f5bd838333604051611db993929190612156565b60405180910390a1505050565b6040518061012001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f6003811115611e4157611e4061218b565b5b81525090565b60405180606001604052805f67ffffffffffffffff1681526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b5f604051905090565b5f80fd5b5f80fd5b5f67ffffffffffffffff82169050919050565b611eb281611e96565b8114611ebc575f80fd5b50565b5f81359050611ecd81611ea9565b92915050565b5f60208284031215611ee857611ee7611e8e565b5b5f611ef584828501611ebf565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b611f3081611e96565b82525050565b5f819050919050565b611f4881611f36565b82525050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611f7782611f4e565b9050919050565b611f8781611f6d565b82525050565b606082015f820151611fa15f850182611f27565b506020820151611fb46020850182611f3f565b506040820151611fc76040850182611f7e565b50505050565b5f611fd88383611f8d565b60608301905092915050565b5f602082019050919050565b5f611ffa82611efe565b6120048185611f08565b935061200f83611f18565b805f5b8381101561203f5781516120268882611fcd565b975061203183611fe4565b925050600181019050612012565b5085935050505092915050565b5f6020820190508181035f8301526120648184611ff0565b905092915050565b61207581611f6d565b811461207f575f80fd5b50565b5f813590506120908161206c565b92915050565b5f602082840312156120ab576120aa611e8e565b5b5f6120b884828501612082565b91505092915050565b6120ca81611f36565b81146120d4575f80fd5b50565b5f813590506120e5816120c1565b92915050565b5f806040838503121561210157612100611e8e565b5b5f61210e85828601611ebf565b925050602061211f858286016120d7565b9150509250929050565b61213281611e96565b82525050565b61214181611f36565b82525050565b61215081611f6d565b82525050565b5f6060820190506121695f830186612129565b6121766020830185612138565b6121836040830184612147565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600481106121c9576121c861218b565b5b50565b5f8190506121d9826121b8565b919050565b5f6121e8826121cc565b9050919050565b6121f8816121de565b82525050565b5f610120820190506122125f83018c612147565b61221f602083018b612147565b61222c604083018a612138565b6122396060830189612138565b6122466080830188612138565b61225360a0830187612138565b61226060c0830186612138565b61226d60e0830185612138565b61227b6101008301846121ef565b9a9950505050505050505050565b5f805f606084860312156122a05761229f611e8e565b5b5f6122ad86828701611ebf565b93505060206122be86828701612082565b92505060406122cf868287016120d7565b9150509250925092565b5f6020820190506122ec5f830184612147565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612340826122fa565b810181811067ffffffffffffffff8211171561235f5761235e61230a565b5b80604052505050565b5f612371611e85565b905061237d8282612337565b919050565b5f67ffffffffffffffff82111561239c5761239b61230a565b5b6123a5826122fa565b9050602081019050919050565b828183375f83830152505050565b5f6123d26123cd84612382565b612368565b9050828152602081018484840111156123ee576123ed6122f6565b5b6123f98482856123b2565b509392505050565b5f82601f830112612415576124146122f2565b5b81356124258482602086016123c0565b91505092915050565b5f805f805f805f80610100898b03121561244b5761244a611e8e565b5b5f89013567ffffffffffffffff81111561246857612467611e92565b5b6124748b828c01612401565b98505060206124858b828c01611ebf565b97505060406124968b828c01611ebf565b96505060606124a78b828c01611ebf565b95505060806124b88b828c016120d7565b94505060a089013567ffffffffffffffff8111156124d9576124d8611e92565b5b6124e58b828c01612401565b93505060c089013567ffffffffffffffff81111561250657612505611e92565b5b6125128b828c01612401565b92505060e089013567ffffffffffffffff81111561253357612532611e92565b5b61253f8b828c01612401565b9150509295985092959890939650565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f6125838383611f27565b60208301905092915050565b5f602082019050919050565b5f6125a58261254f565b6125af8185612559565b93506125ba83612569565b805f5b838110156125ea5781516125d18882612578565b97506125dc8361258f565b9250506001810190506125bd565b5085935050505092915050565b5f6020820190508181035f83015261260f818461259b565b905092915050565b5f819050919050565b5f61263a61263561263084611f4e565b612617565b611f4e565b9050919050565b5f61264b82612620565b9050919050565b5f61265c82612641565b9050919050565b61266c81612652565b82525050565b5f6020820190506126855f830184612663565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6126bd8261268b565b6126c78185612695565b93506126d78185602086016126a5565b6126e0816122fa565b840191505092915050565b5f610180820190506126ff5f83018f612129565b8181036020830152612711818e6126b3565b9050612720604083018d612129565b61272d606083018c612129565b61273a608083018b612129565b61274760a083018a612138565b81810360c083015261275981896126b3565b905061276860e0830188612147565b6127766101008301876121ef565b81810361012083015261278981866126b3565b905081810361014083015261279e81856126b3565b90506127ae610160830184612138565b9d9c50505050505050505050505050565b6127c8816121de565b82525050565b61012082015f8201516127e35f850182611f7e565b5060208201516127f66020850182611f7e565b5060408201516128096040850182611f3f565b50606082015161281c6060850182611f3f565b50608082015161282f6080850182611f3f565b5060a082015161284260a0850182611f3f565b5060c082015161285560c0850182611f3f565b5060e082015161286860e0850182611f3f565b5061010082015161287d6101008501826127bf565b50505050565b5f610120820190506128975f8301846127ce565b92915050565b5f80604083850312156128b3576128b2611e8e565b5b5f6128c085828601611ebf565b92505060206128d185828601612082565b9150509250929050565b7f4f6e6c79206f776e65722063616e20706572666f726d207468697320616374695f8201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b5f612935602283612695565b9150612940826128db565b604082019050919050565b5f6020820190508181035f83015261296281612929565b9050919050565b7f4f6e6c7920617574686f72697a656420616464726573732063616e20706572665f8201527f6f726d207468697320616374696f6e0000000000000000000000000000000000602082015250565b5f6129c3602f83612695565b91506129ce82612969565b604082019050919050565b5f6020820190508181035f8301526129f0816129b7565b9050919050565b7f4f7264657220646f6573206e6f742065786973740000000000000000000000005f82015250565b5f612a2b601483612695565b9150612a36826129f7565b602082019050919050565b5f6020820190508181035f830152612a5881612a1f565b9050919050565b7f4f72646572206973206e6f7420616374697665000000000000000000000000005f82015250565b5f612a93601383612695565b9150612a9e82612a5f565b602082019050919050565b5f6020820190508181035f830152612ac081612a87565b9050919050565b5f81519050612ad5816120c1565b92915050565b5f612aed612ae884612382565b612368565b905082815260208101848484011115612b0957612b086122f6565b5b612b148482856126a5565b509392505050565b5f82601f830112612b3057612b2f6122f2565b5b8151612b40848260208601612adb565b91505092915050565b5f81519050612b578161206c565b92915050565b5f8115159050919050565b612b7181612b5d565b8114612b7b575f80fd5b50565b5f81519050612b8c81612b68565b92915050565b5f805f8060808587031215612baa57612ba9611e8e565b5b5f612bb787828801612ac7565b945050602085015167ffffffffffffffff811115612bd857612bd7611e92565b5b612be487828801612b1c565b9350506040612bf587828801612b49565b9250506060612c0687828801612b7e565b91505092959194509250565b7f50726f7669646572206973206e6f7420616e20616374697665206e6f646520705f8201527f726f766964657200000000000000000000000000000000000000000000000000602082015250565b5f612c6c602783612695565b9150612c7782612c12565b604082019050919050565b5f6020820190508181035f830152612c9981612c60565b9050919050565b5f60a082019050612cb35f830188612129565b612cc06020830187612147565b612ccd6040830186612138565b612cda6060830185612138565b612ce76080830184612147565b9695505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612d2882611e96565b915067ffffffffffffffff8203612d4257612d41612cf1565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612d9157607f821691505b602082108103612da457612da3612d4d565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302612e067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612dcb565b612e108683612dcb565b95508019841693508086168417925050509392505050565b5f612e42612e3d612e3884611f36565b612617565b611f36565b9050919050565b5f819050919050565b612e5b83612e28565b612e6f612e6782612e49565b848454612dd7565b825550505050565b5f90565b612e83612e77565b612e8e818484612e52565b505050565b5b81811015612eb157612ea65f82612e7b565b600181019050612e94565b5050565b601f821115612ef657612ec781612daa565b612ed084612dbc565b81016020851015612edf578190505b612ef3612eeb85612dbc565b830182612e93565b50505b505050565b5f82821c905092915050565b5f612f165f1984600802612efb565b1980831691505092915050565b5f612f2e8383612f07565b9150826002028217905092915050565b612f478261268b565b67ffffffffffffffff811115612f6057612f5f61230a565b5b612f6a8254612d7a565b612f75828285612eb5565b5f60209050601f831160018114612fa6575f8415612f94578287015190505b612f9e8582612f23565b865550613005565b601f198416612fb486612daa565b5f5b82811015612fdb57848901518255600182019150602085019450602081019050612fb6565b86831015612ff85784890151612ff4601f891682612f07565b8355505b6001600288020188555050505b505050505050565b5f6040820190506130205f830185612129565b61302d6020830184612147565b9392505050565b7f4f72646572206973206e6f742070726f766973696f6e6564206f72206d6174635f8201527f6865640000000000000000000000000000000000000000000000000000000000602082015250565b5f61308e602383612695565b915061309982613034565b604082019050919050565b5f6020820190508181035f8301526130bb81613082565b9050919050565b7f4f6e6c792063726561746f72206f722070726f76696465722063616e20636c6f5f8201527f736520746865206f726465720000000000000000000000000000000000000000602082015250565b5f61311c602c83612695565b9150613127826130c2565b604082019050919050565b5f6020820190508181035f83015261314981613110565b9050919050565b5f6060820190506131635f830186612129565b6131706020830185612147565b61317d6040830184612147565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f6131bc82611f36565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131ee576131ed612cf1565b5b600182019050919050565b7f4269642070726963652065786365656473206d617820707269636500000000005f82015250565b5f61322d601b83612695565b9150613238826131f9565b602082019050919050565b5f6020820190508181035f83015261325a81613221565b9050919050565b5f61326b82611f36565b915061327683611f36565b925082820190508082111561328e5761328d612cf1565b5b92915050565b7f42696464696e6720706572696f642068617320656e64656400000000000000005f82015250565b5f6132c8601883612695565b91506132d382613294565b602082019050919050565b5f6020820190508181035f8301526132f5816132bc565b9050919050565b7f426964646572206973206e6f7420616e20616374697665206e6f64652070726f5f8201527f7669646572000000000000000000000000000000000000000000000000000000602082015250565b5f613356602583612695565b9150613361826132fc565b604082019050919050565b5f6020820190508181035f8301526133838161334a565b905091905056fea2646970667358221220d73c8f431aa6a657116c31839f32f276105642a5cb17040a0b45b0c257c6e00764736f6c63430008190033",
}

// OrderMatchingABI is the input ABI used to generate the binding from.
// Deprecated: Use OrderMatchingMetaData.ABI instead.
var OrderMatchingABI = OrderMatchingMetaData.ABI

// OrderMatchingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OrderMatchingMetaData.Bin instead.
var OrderMatchingBin = OrderMatchingMetaData.Bin

// DeployOrderMatching deploys a new Ethereum contract, binding an instance of OrderMatching to it.
func DeployOrderMatching(auth *bind.TransactOpts, backend bind.ContractBackend, _nodeProviderRegistryAddress common.Address, _authorizedAddress common.Address) (common.Address, *types.Transaction, *OrderMatching, error) {
	parsed, err := OrderMatchingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OrderMatchingBin), backend, _nodeProviderRegistryAddress, _authorizedAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OrderMatching{OrderMatchingCaller: OrderMatchingCaller{contract: contract}, OrderMatchingTransactor: OrderMatchingTransactor{contract: contract}, OrderMatchingFilterer: OrderMatchingFilterer{contract: contract}}, nil
}

// OrderMatching is an auto generated Go binding around an Ethereum contract.
type OrderMatching struct {
	OrderMatchingCaller     // Read-only binding to the contract
	OrderMatchingTransactor // Write-only binding to the contract
	OrderMatchingFilterer   // Log filterer for contract events
}

// OrderMatchingCaller is an auto generated read-only Go binding around an Ethereum contract.
type OrderMatchingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderMatchingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OrderMatchingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderMatchingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OrderMatchingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderMatchingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OrderMatchingSession struct {
	Contract     *OrderMatching    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OrderMatchingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OrderMatchingCallerSession struct {
	Contract *OrderMatchingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// OrderMatchingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OrderMatchingTransactorSession struct {
	Contract     *OrderMatchingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// OrderMatchingRaw is an auto generated low-level Go binding around an Ethereum contract.
type OrderMatchingRaw struct {
	Contract *OrderMatching // Generic contract binding to access the raw methods on
}

// OrderMatchingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OrderMatchingCallerRaw struct {
	Contract *OrderMatchingCaller // Generic read-only contract binding to access the raw methods on
}

// OrderMatchingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OrderMatchingTransactorRaw struct {
	Contract *OrderMatchingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOrderMatching creates a new instance of OrderMatching, bound to a specific deployed contract.
func NewOrderMatching(address common.Address, backend bind.ContractBackend) (*OrderMatching, error) {
	contract, err := bindOrderMatching(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OrderMatching{OrderMatchingCaller: OrderMatchingCaller{contract: contract}, OrderMatchingTransactor: OrderMatchingTransactor{contract: contract}, OrderMatchingFilterer: OrderMatchingFilterer{contract: contract}}, nil
}

// NewOrderMatchingCaller creates a new read-only instance of OrderMatching, bound to a specific deployed contract.
func NewOrderMatchingCaller(address common.Address, caller bind.ContractCaller) (*OrderMatchingCaller, error) {
	contract, err := bindOrderMatching(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OrderMatchingCaller{contract: contract}, nil
}

// NewOrderMatchingTransactor creates a new write-only instance of OrderMatching, bound to a specific deployed contract.
func NewOrderMatchingTransactor(address common.Address, transactor bind.ContractTransactor) (*OrderMatchingTransactor, error) {
	contract, err := bindOrderMatching(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OrderMatchingTransactor{contract: contract}, nil
}

// NewOrderMatchingFilterer creates a new log filterer instance of OrderMatching, bound to a specific deployed contract.
func NewOrderMatchingFilterer(address common.Address, filterer bind.ContractFilterer) (*OrderMatchingFilterer, error) {
	contract, err := bindOrderMatching(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OrderMatchingFilterer{contract: contract}, nil
}

// bindOrderMatching binds a generic wrapper to an already deployed contract.
func bindOrderMatching(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := OrderMatchingMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OrderMatching *OrderMatchingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OrderMatching.Contract.OrderMatchingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OrderMatching *OrderMatchingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OrderMatching.Contract.OrderMatchingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OrderMatching *OrderMatchingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OrderMatching.Contract.OrderMatchingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OrderMatching *OrderMatchingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OrderMatching.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OrderMatching *OrderMatchingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OrderMatching.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OrderMatching *OrderMatchingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OrderMatching.Contract.contract.Transact(opts, method, params...)
}

// AuthorizedAddress is a free data retrieval call binding the contract method 0x5539d400.
//
// Solidity: function authorizedAddress() view returns(address)
func (_OrderMatching *OrderMatchingCaller) AuthorizedAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "authorizedAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AuthorizedAddress is a free data retrieval call binding the contract method 0x5539d400.
//
// Solidity: function authorizedAddress() view returns(address)
func (_OrderMatching *OrderMatchingSession) AuthorizedAddress() (common.Address, error) {
	return _OrderMatching.Contract.AuthorizedAddress(&_OrderMatching.CallOpts)
}

// AuthorizedAddress is a free data retrieval call binding the contract method 0x5539d400.
//
// Solidity: function authorizedAddress() view returns(address)
func (_OrderMatching *OrderMatchingCallerSession) AuthorizedAddress() (common.Address, error) {
	return _OrderMatching.Contract.AuthorizedAddress(&_OrderMatching.CallOpts)
}

// Bids is a free data retrieval call binding the contract method 0x47d4f8f2.
//
// Solidity: function bids(uint64 , uint256 ) view returns(uint64 orderId, uint256 bidPrice, address bidder)
func (_OrderMatching *OrderMatchingCaller) Bids(opts *bind.CallOpts, arg0 uint64, arg1 *big.Int) (struct {
	OrderId  uint64
	BidPrice *big.Int
	Bidder   common.Address
}, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "bids", arg0, arg1)

	outstruct := new(struct {
		OrderId  uint64
		BidPrice *big.Int
		Bidder   common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.OrderId = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.BidPrice = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Bidder = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// Bids is a free data retrieval call binding the contract method 0x47d4f8f2.
//
// Solidity: function bids(uint64 , uint256 ) view returns(uint64 orderId, uint256 bidPrice, address bidder)
func (_OrderMatching *OrderMatchingSession) Bids(arg0 uint64, arg1 *big.Int) (struct {
	OrderId  uint64
	BidPrice *big.Int
	Bidder   common.Address
}, error) {
	return _OrderMatching.Contract.Bids(&_OrderMatching.CallOpts, arg0, arg1)
}

// Bids is a free data retrieval call binding the contract method 0x47d4f8f2.
//
// Solidity: function bids(uint64 , uint256 ) view returns(uint64 orderId, uint256 bidPrice, address bidder)
func (_OrderMatching *OrderMatchingCallerSession) Bids(arg0 uint64, arg1 *big.Int) (struct {
	OrderId  uint64
	BidPrice *big.Int
	Bidder   common.Address
}, error) {
	return _OrderMatching.Contract.Bids(&_OrderMatching.CallOpts, arg0, arg1)
}

// GetAllBidsForOrder is a free data retrieval call binding the contract method 0x268c3384.
//
// Solidity: function getAllBidsForOrder(uint64 _orderId) view returns((uint64,uint256,address)[])
func (_OrderMatching *OrderMatchingCaller) GetAllBidsForOrder(opts *bind.CallOpts, _orderId uint64) ([]OrderMatchingBid, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "getAllBidsForOrder", _orderId)

	if err != nil {
		return *new([]OrderMatchingBid), err
	}

	out0 := *abi.ConvertType(out[0], new([]OrderMatchingBid)).(*[]OrderMatchingBid)

	return out0, err

}

// GetAllBidsForOrder is a free data retrieval call binding the contract method 0x268c3384.
//
// Solidity: function getAllBidsForOrder(uint64 _orderId) view returns((uint64,uint256,address)[])
func (_OrderMatching *OrderMatchingSession) GetAllBidsForOrder(_orderId uint64) ([]OrderMatchingBid, error) {
	return _OrderMatching.Contract.GetAllBidsForOrder(&_OrderMatching.CallOpts, _orderId)
}

// GetAllBidsForOrder is a free data retrieval call binding the contract method 0x268c3384.
//
// Solidity: function getAllBidsForOrder(uint64 _orderId) view returns((uint64,uint256,address)[])
func (_OrderMatching *OrderMatchingCallerSession) GetAllBidsForOrder(_orderId uint64) ([]OrderMatchingBid, error) {
	return _OrderMatching.Contract.GetAllBidsForOrder(&_OrderMatching.CallOpts, _orderId)
}

// GetBid is a free data retrieval call binding the contract method 0xf313fc44.
//
// Solidity: function getBid(uint64 _orderId, address _provider) view returns((uint64,uint256,address)[])
func (_OrderMatching *OrderMatchingCaller) GetBid(opts *bind.CallOpts, _orderId uint64, _provider common.Address) ([]OrderMatchingBid, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "getBid", _orderId, _provider)

	if err != nil {
		return *new([]OrderMatchingBid), err
	}

	out0 := *abi.ConvertType(out[0], new([]OrderMatchingBid)).(*[]OrderMatchingBid)

	return out0, err

}

// GetBid is a free data retrieval call binding the contract method 0xf313fc44.
//
// Solidity: function getBid(uint64 _orderId, address _provider) view returns((uint64,uint256,address)[])
func (_OrderMatching *OrderMatchingSession) GetBid(_orderId uint64, _provider common.Address) ([]OrderMatchingBid, error) {
	return _OrderMatching.Contract.GetBid(&_OrderMatching.CallOpts, _orderId, _provider)
}

// GetBid is a free data retrieval call binding the contract method 0xf313fc44.
//
// Solidity: function getBid(uint64 _orderId, address _provider) view returns((uint64,uint256,address)[])
func (_OrderMatching *OrderMatchingCallerSession) GetBid(_orderId uint64, _provider common.Address) ([]OrderMatchingBid, error) {
	return _OrderMatching.Contract.GetBid(&_OrderMatching.CallOpts, _orderId, _provider)
}

// GetOrderById is a free data retrieval call binding the contract method 0xb930807d.
//
// Solidity: function getOrderById(uint64 _orderId) view returns((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8))
func (_OrderMatching *OrderMatchingCaller) GetOrderById(opts *bind.CallOpts, _orderId uint64) (OrderMatchingLease, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "getOrderById", _orderId)

	if err != nil {
		return *new(OrderMatchingLease), err
	}

	out0 := *abi.ConvertType(out[0], new(OrderMatchingLease)).(*OrderMatchingLease)

	return out0, err

}

// GetOrderById is a free data retrieval call binding the contract method 0xb930807d.
//
// Solidity: function getOrderById(uint64 _orderId) view returns((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8))
func (_OrderMatching *OrderMatchingSession) GetOrderById(_orderId uint64) (OrderMatchingLease, error) {
	return _OrderMatching.Contract.GetOrderById(&_OrderMatching.CallOpts, _orderId)
}

// GetOrderById is a free data retrieval call binding the contract method 0xb930807d.
//
// Solidity: function getOrderById(uint64 _orderId) view returns((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8))
func (_OrderMatching *OrderMatchingCallerSession) GetOrderById(_orderId uint64) (OrderMatchingLease, error) {
	return _OrderMatching.Contract.GetOrderById(&_OrderMatching.CallOpts, _orderId)
}

// GetOrderByProvider is a free data retrieval call binding the contract method 0x638d7dec.
//
// Solidity: function getOrderByProvider(address _providerAddress) view returns(uint64[])
func (_OrderMatching *OrderMatchingCaller) GetOrderByProvider(opts *bind.CallOpts, _providerAddress common.Address) ([]uint64, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "getOrderByProvider", _providerAddress)

	if err != nil {
		return *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint64)).(*[]uint64)

	return out0, err

}

// GetOrderByProvider is a free data retrieval call binding the contract method 0x638d7dec.
//
// Solidity: function getOrderByProvider(address _providerAddress) view returns(uint64[])
func (_OrderMatching *OrderMatchingSession) GetOrderByProvider(_providerAddress common.Address) ([]uint64, error) {
	return _OrderMatching.Contract.GetOrderByProvider(&_OrderMatching.CallOpts, _providerAddress)
}

// GetOrderByProvider is a free data retrieval call binding the contract method 0x638d7dec.
//
// Solidity: function getOrderByProvider(address _providerAddress) view returns(uint64[])
func (_OrderMatching *OrderMatchingCallerSession) GetOrderByProvider(_providerAddress common.Address) ([]uint64, error) {
	return _OrderMatching.Contract.GetOrderByProvider(&_OrderMatching.CallOpts, _providerAddress)
}

// Leases is a free data retrieval call binding the contract method 0x4c7f3c79.
//
// Solidity: function leases(uint64 ) view returns(address providerAddress, address tenantAddress, uint256 providerId, uint256 acceptedPrice, uint256 startBlock, uint256 startTime, uint256 endBlock, uint256 endTime, uint8 state)
func (_OrderMatching *OrderMatchingCaller) Leases(opts *bind.CallOpts, arg0 uint64) (struct {
	ProviderAddress common.Address
	TenantAddress   common.Address
	ProviderId      *big.Int
	AcceptedPrice   *big.Int
	StartBlock      *big.Int
	StartTime       *big.Int
	EndBlock        *big.Int
	EndTime         *big.Int
	State           uint8
}, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "leases", arg0)

	outstruct := new(struct {
		ProviderAddress common.Address
		TenantAddress   common.Address
		ProviderId      *big.Int
		AcceptedPrice   *big.Int
		StartBlock      *big.Int
		StartTime       *big.Int
		EndBlock        *big.Int
		EndTime         *big.Int
		State           uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ProviderAddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.TenantAddress = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.ProviderId = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.AcceptedPrice = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.StartBlock = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.StartTime = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.EndBlock = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.EndTime = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)
	outstruct.State = *abi.ConvertType(out[8], new(uint8)).(*uint8)

	return *outstruct, err

}

// Leases is a free data retrieval call binding the contract method 0x4c7f3c79.
//
// Solidity: function leases(uint64 ) view returns(address providerAddress, address tenantAddress, uint256 providerId, uint256 acceptedPrice, uint256 startBlock, uint256 startTime, uint256 endBlock, uint256 endTime, uint8 state)
func (_OrderMatching *OrderMatchingSession) Leases(arg0 uint64) (struct {
	ProviderAddress common.Address
	TenantAddress   common.Address
	ProviderId      *big.Int
	AcceptedPrice   *big.Int
	StartBlock      *big.Int
	StartTime       *big.Int
	EndBlock        *big.Int
	EndTime         *big.Int
	State           uint8
}, error) {
	return _OrderMatching.Contract.Leases(&_OrderMatching.CallOpts, arg0)
}

// Leases is a free data retrieval call binding the contract method 0x4c7f3c79.
//
// Solidity: function leases(uint64 ) view returns(address providerAddress, address tenantAddress, uint256 providerId, uint256 acceptedPrice, uint256 startBlock, uint256 startTime, uint256 endBlock, uint256 endTime, uint8 state)
func (_OrderMatching *OrderMatchingCallerSession) Leases(arg0 uint64) (struct {
	ProviderAddress common.Address
	TenantAddress   common.Address
	ProviderId      *big.Int
	AcceptedPrice   *big.Int
	StartBlock      *big.Int
	StartTime       *big.Int
	EndBlock        *big.Int
	EndTime         *big.Int
	State           uint8
}, error) {
	return _OrderMatching.Contract.Leases(&_OrderMatching.CallOpts, arg0)
}

// NodeProviderRegistry is a free data retrieval call binding the contract method 0x6582972e.
//
// Solidity: function nodeProviderRegistry() view returns(address)
func (_OrderMatching *OrderMatchingCaller) NodeProviderRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "nodeProviderRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NodeProviderRegistry is a free data retrieval call binding the contract method 0x6582972e.
//
// Solidity: function nodeProviderRegistry() view returns(address)
func (_OrderMatching *OrderMatchingSession) NodeProviderRegistry() (common.Address, error) {
	return _OrderMatching.Contract.NodeProviderRegistry(&_OrderMatching.CallOpts)
}

// NodeProviderRegistry is a free data retrieval call binding the contract method 0x6582972e.
//
// Solidity: function nodeProviderRegistry() view returns(address)
func (_OrderMatching *OrderMatchingCallerSession) NodeProviderRegistry() (common.Address, error) {
	return _OrderMatching.Contract.NodeProviderRegistry(&_OrderMatching.CallOpts)
}

// Orders is a free data retrieval call binding the contract method 0xa469dffa.
//
// Solidity: function orders(uint64 ) view returns(uint64 id, string region, uint64 uptime, uint64 reputation, uint64 slashes, uint256 maxPrice, string token, address creator, uint8 state, string specs, string version, uint256 creationBlock)
func (_OrderMatching *OrderMatchingCaller) Orders(opts *bind.CallOpts, arg0 uint64) (struct {
	Id            uint64
	Region        string
	Uptime        uint64
	Reputation    uint64
	Slashes       uint64
	MaxPrice      *big.Int
	Token         string
	Creator       common.Address
	State         uint8
	Specs         string
	Version       string
	CreationBlock *big.Int
}, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "orders", arg0)

	outstruct := new(struct {
		Id            uint64
		Region        string
		Uptime        uint64
		Reputation    uint64
		Slashes       uint64
		MaxPrice      *big.Int
		Token         string
		Creator       common.Address
		State         uint8
		Specs         string
		Version       string
		CreationBlock *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.Region = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Uptime = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.Reputation = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.Slashes = *abi.ConvertType(out[4], new(uint64)).(*uint64)
	outstruct.MaxPrice = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Token = *abi.ConvertType(out[6], new(string)).(*string)
	outstruct.Creator = *abi.ConvertType(out[7], new(common.Address)).(*common.Address)
	outstruct.State = *abi.ConvertType(out[8], new(uint8)).(*uint8)
	outstruct.Specs = *abi.ConvertType(out[9], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[10], new(string)).(*string)
	outstruct.CreationBlock = *abi.ConvertType(out[11], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Orders is a free data retrieval call binding the contract method 0xa469dffa.
//
// Solidity: function orders(uint64 ) view returns(uint64 id, string region, uint64 uptime, uint64 reputation, uint64 slashes, uint256 maxPrice, string token, address creator, uint8 state, string specs, string version, uint256 creationBlock)
func (_OrderMatching *OrderMatchingSession) Orders(arg0 uint64) (struct {
	Id            uint64
	Region        string
	Uptime        uint64
	Reputation    uint64
	Slashes       uint64
	MaxPrice      *big.Int
	Token         string
	Creator       common.Address
	State         uint8
	Specs         string
	Version       string
	CreationBlock *big.Int
}, error) {
	return _OrderMatching.Contract.Orders(&_OrderMatching.CallOpts, arg0)
}

// Orders is a free data retrieval call binding the contract method 0xa469dffa.
//
// Solidity: function orders(uint64 ) view returns(uint64 id, string region, uint64 uptime, uint64 reputation, uint64 slashes, uint256 maxPrice, string token, address creator, uint8 state, string specs, string version, uint256 creationBlock)
func (_OrderMatching *OrderMatchingCallerSession) Orders(arg0 uint64) (struct {
	Id            uint64
	Region        string
	Uptime        uint64
	Reputation    uint64
	Slashes       uint64
	MaxPrice      *big.Int
	Token         string
	Creator       common.Address
	State         uint8
	Specs         string
	Version       string
	CreationBlock *big.Int
}, error) {
	return _OrderMatching.Contract.Orders(&_OrderMatching.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OrderMatching *OrderMatchingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OrderMatching *OrderMatchingSession) Owner() (common.Address, error) {
	return _OrderMatching.Contract.Owner(&_OrderMatching.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OrderMatching *OrderMatchingCallerSession) Owner() (common.Address, error) {
	return _OrderMatching.Contract.Owner(&_OrderMatching.CallOpts)
}

// CloseOrder is a paid mutator transaction binding the contract method 0x7a544ad3.
//
// Solidity: function closeOrder(uint64 _orderId) returns()
func (_OrderMatching *OrderMatchingTransactor) CloseOrder(opts *bind.TransactOpts, _orderId uint64) (*types.Transaction, error) {
	return _OrderMatching.contract.Transact(opts, "closeOrder", _orderId)
}

// CloseOrder is a paid mutator transaction binding the contract method 0x7a544ad3.
//
// Solidity: function closeOrder(uint64 _orderId) returns()
func (_OrderMatching *OrderMatchingSession) CloseOrder(_orderId uint64) (*types.Transaction, error) {
	return _OrderMatching.Contract.CloseOrder(&_OrderMatching.TransactOpts, _orderId)
}

// CloseOrder is a paid mutator transaction binding the contract method 0x7a544ad3.
//
// Solidity: function closeOrder(uint64 _orderId) returns()
func (_OrderMatching *OrderMatchingTransactorSession) CloseOrder(_orderId uint64) (*types.Transaction, error) {
	return _OrderMatching.Contract.CloseOrder(&_OrderMatching.TransactOpts, _orderId)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x59e7bf4b.
//
// Solidity: function createOrder(string _region, uint64 _uptime, uint64 _reputation, uint64 _slashes, uint256 _maxPrice, string _token, string _spec, string _version) returns()
func (_OrderMatching *OrderMatchingTransactor) CreateOrder(opts *bind.TransactOpts, _region string, _uptime uint64, _reputation uint64, _slashes uint64, _maxPrice *big.Int, _token string, _spec string, _version string) (*types.Transaction, error) {
	return _OrderMatching.contract.Transact(opts, "createOrder", _region, _uptime, _reputation, _slashes, _maxPrice, _token, _spec, _version)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x59e7bf4b.
//
// Solidity: function createOrder(string _region, uint64 _uptime, uint64 _reputation, uint64 _slashes, uint256 _maxPrice, string _token, string _spec, string _version) returns()
func (_OrderMatching *OrderMatchingSession) CreateOrder(_region string, _uptime uint64, _reputation uint64, _slashes uint64, _maxPrice *big.Int, _token string, _spec string, _version string) (*types.Transaction, error) {
	return _OrderMatching.Contract.CreateOrder(&_OrderMatching.TransactOpts, _region, _uptime, _reputation, _slashes, _maxPrice, _token, _spec, _version)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x59e7bf4b.
//
// Solidity: function createOrder(string _region, uint64 _uptime, uint64 _reputation, uint64 _slashes, uint256 _maxPrice, string _token, string _spec, string _version) returns()
func (_OrderMatching *OrderMatchingTransactorSession) CreateOrder(_region string, _uptime uint64, _reputation uint64, _slashes uint64, _maxPrice *big.Int, _token string, _spec string, _version string) (*types.Transaction, error) {
	return _OrderMatching.Contract.CreateOrder(&_OrderMatching.TransactOpts, _region, _uptime, _reputation, _slashes, _maxPrice, _token, _spec, _version)
}

// MatchOrder is a paid mutator transaction binding the contract method 0x4fd2edbb.
//
// Solidity: function matchOrder(uint64 _orderId, address _providerAddress, uint256 _acceptedPrice) returns()
func (_OrderMatching *OrderMatchingTransactor) MatchOrder(opts *bind.TransactOpts, _orderId uint64, _providerAddress common.Address, _acceptedPrice *big.Int) (*types.Transaction, error) {
	return _OrderMatching.contract.Transact(opts, "matchOrder", _orderId, _providerAddress, _acceptedPrice)
}

// MatchOrder is a paid mutator transaction binding the contract method 0x4fd2edbb.
//
// Solidity: function matchOrder(uint64 _orderId, address _providerAddress, uint256 _acceptedPrice) returns()
func (_OrderMatching *OrderMatchingSession) MatchOrder(_orderId uint64, _providerAddress common.Address, _acceptedPrice *big.Int) (*types.Transaction, error) {
	return _OrderMatching.Contract.MatchOrder(&_OrderMatching.TransactOpts, _orderId, _providerAddress, _acceptedPrice)
}

// MatchOrder is a paid mutator transaction binding the contract method 0x4fd2edbb.
//
// Solidity: function matchOrder(uint64 _orderId, address _providerAddress, uint256 _acceptedPrice) returns()
func (_OrderMatching *OrderMatchingTransactorSession) MatchOrder(_orderId uint64, _providerAddress common.Address, _acceptedPrice *big.Int) (*types.Transaction, error) {
	return _OrderMatching.Contract.MatchOrder(&_OrderMatching.TransactOpts, _orderId, _providerAddress, _acceptedPrice)
}

// PlaceBid is a paid mutator transaction binding the contract method 0xfd2e5a23.
//
// Solidity: function placeBid(uint64 _orderId, uint256 _bidPrice) returns()
func (_OrderMatching *OrderMatchingTransactor) PlaceBid(opts *bind.TransactOpts, _orderId uint64, _bidPrice *big.Int) (*types.Transaction, error) {
	return _OrderMatching.contract.Transact(opts, "placeBid", _orderId, _bidPrice)
}

// PlaceBid is a paid mutator transaction binding the contract method 0xfd2e5a23.
//
// Solidity: function placeBid(uint64 _orderId, uint256 _bidPrice) returns()
func (_OrderMatching *OrderMatchingSession) PlaceBid(_orderId uint64, _bidPrice *big.Int) (*types.Transaction, error) {
	return _OrderMatching.Contract.PlaceBid(&_OrderMatching.TransactOpts, _orderId, _bidPrice)
}

// PlaceBid is a paid mutator transaction binding the contract method 0xfd2e5a23.
//
// Solidity: function placeBid(uint64 _orderId, uint256 _bidPrice) returns()
func (_OrderMatching *OrderMatchingTransactorSession) PlaceBid(_orderId uint64, _bidPrice *big.Int) (*types.Transaction, error) {
	return _OrderMatching.Contract.PlaceBid(&_OrderMatching.TransactOpts, _orderId, _bidPrice)
}

// UpdateAuthorizedAddress is a paid mutator transaction binding the contract method 0x28d389bc.
//
// Solidity: function updateAuthorizedAddress(address _newAuthorizedAddress) returns()
func (_OrderMatching *OrderMatchingTransactor) UpdateAuthorizedAddress(opts *bind.TransactOpts, _newAuthorizedAddress common.Address) (*types.Transaction, error) {
	return _OrderMatching.contract.Transact(opts, "updateAuthorizedAddress", _newAuthorizedAddress)
}

// UpdateAuthorizedAddress is a paid mutator transaction binding the contract method 0x28d389bc.
//
// Solidity: function updateAuthorizedAddress(address _newAuthorizedAddress) returns()
func (_OrderMatching *OrderMatchingSession) UpdateAuthorizedAddress(_newAuthorizedAddress common.Address) (*types.Transaction, error) {
	return _OrderMatching.Contract.UpdateAuthorizedAddress(&_OrderMatching.TransactOpts, _newAuthorizedAddress)
}

// UpdateAuthorizedAddress is a paid mutator transaction binding the contract method 0x28d389bc.
//
// Solidity: function updateAuthorizedAddress(address _newAuthorizedAddress) returns()
func (_OrderMatching *OrderMatchingTransactorSession) UpdateAuthorizedAddress(_newAuthorizedAddress common.Address) (*types.Transaction, error) {
	return _OrderMatching.Contract.UpdateAuthorizedAddress(&_OrderMatching.TransactOpts, _newAuthorizedAddress)
}

// OrderMatchingAuthorizedAddressUpdatedIterator is returned from FilterAuthorizedAddressUpdated and is used to iterate over the raw logs and unpacked data for AuthorizedAddressUpdated events raised by the OrderMatching contract.
type OrderMatchingAuthorizedAddressUpdatedIterator struct {
	Event *OrderMatchingAuthorizedAddressUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMatchingAuthorizedAddressUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMatchingAuthorizedAddressUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMatchingAuthorizedAddressUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMatchingAuthorizedAddressUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMatchingAuthorizedAddressUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMatchingAuthorizedAddressUpdated represents a AuthorizedAddressUpdated event raised by the OrderMatching contract.
type OrderMatchingAuthorizedAddressUpdated struct {
	NewAuthorizedAddress common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterAuthorizedAddressUpdated is a free log retrieval operation binding the contract event 0xe12f594f8990d16225e1238de64b5ef16fbe78fbb1a70f64e3a82274e9554c0a.
//
// Solidity: event AuthorizedAddressUpdated(address newAuthorizedAddress)
func (_OrderMatching *OrderMatchingFilterer) FilterAuthorizedAddressUpdated(opts *bind.FilterOpts) (*OrderMatchingAuthorizedAddressUpdatedIterator, error) {

	logs, sub, err := _OrderMatching.contract.FilterLogs(opts, "AuthorizedAddressUpdated")
	if err != nil {
		return nil, err
	}
	return &OrderMatchingAuthorizedAddressUpdatedIterator{contract: _OrderMatching.contract, event: "AuthorizedAddressUpdated", logs: logs, sub: sub}, nil
}

// WatchAuthorizedAddressUpdated is a free log subscription operation binding the contract event 0xe12f594f8990d16225e1238de64b5ef16fbe78fbb1a70f64e3a82274e9554c0a.
//
// Solidity: event AuthorizedAddressUpdated(address newAuthorizedAddress)
func (_OrderMatching *OrderMatchingFilterer) WatchAuthorizedAddressUpdated(opts *bind.WatchOpts, sink chan<- *OrderMatchingAuthorizedAddressUpdated) (event.Subscription, error) {

	logs, sub, err := _OrderMatching.contract.WatchLogs(opts, "AuthorizedAddressUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMatchingAuthorizedAddressUpdated)
				if err := _OrderMatching.contract.UnpackLog(event, "AuthorizedAddressUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorizedAddressUpdated is a log parse operation binding the contract event 0xe12f594f8990d16225e1238de64b5ef16fbe78fbb1a70f64e3a82274e9554c0a.
//
// Solidity: event AuthorizedAddressUpdated(address newAuthorizedAddress)
func (_OrderMatching *OrderMatchingFilterer) ParseAuthorizedAddressUpdated(log types.Log) (*OrderMatchingAuthorizedAddressUpdated, error) {
	event := new(OrderMatchingAuthorizedAddressUpdated)
	if err := _OrderMatching.contract.UnpackLog(event, "AuthorizedAddressUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMatchingBidPlacedIterator is returned from FilterBidPlaced and is used to iterate over the raw logs and unpacked data for BidPlaced events raised by the OrderMatching contract.
type OrderMatchingBidPlacedIterator struct {
	Event *OrderMatchingBidPlaced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMatchingBidPlacedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMatchingBidPlaced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMatchingBidPlaced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMatchingBidPlacedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMatchingBidPlacedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMatchingBidPlaced represents a BidPlaced event raised by the OrderMatching contract.
type OrderMatchingBidPlaced struct {
	OrderId  uint64
	BidPrice *big.Int
	Bidder   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBidPlaced is a free log retrieval operation binding the contract event 0x3a15efc4974c5d6dc4b1c18daba29785cc2d9ae521ad82862e6d32b414b4f5bd.
//
// Solidity: event BidPlaced(uint64 orderId, uint256 bidPrice, address bidder)
func (_OrderMatching *OrderMatchingFilterer) FilterBidPlaced(opts *bind.FilterOpts) (*OrderMatchingBidPlacedIterator, error) {

	logs, sub, err := _OrderMatching.contract.FilterLogs(opts, "BidPlaced")
	if err != nil {
		return nil, err
	}
	return &OrderMatchingBidPlacedIterator{contract: _OrderMatching.contract, event: "BidPlaced", logs: logs, sub: sub}, nil
}

// WatchBidPlaced is a free log subscription operation binding the contract event 0x3a15efc4974c5d6dc4b1c18daba29785cc2d9ae521ad82862e6d32b414b4f5bd.
//
// Solidity: event BidPlaced(uint64 orderId, uint256 bidPrice, address bidder)
func (_OrderMatching *OrderMatchingFilterer) WatchBidPlaced(opts *bind.WatchOpts, sink chan<- *OrderMatchingBidPlaced) (event.Subscription, error) {

	logs, sub, err := _OrderMatching.contract.WatchLogs(opts, "BidPlaced")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMatchingBidPlaced)
				if err := _OrderMatching.contract.UnpackLog(event, "BidPlaced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBidPlaced is a log parse operation binding the contract event 0x3a15efc4974c5d6dc4b1c18daba29785cc2d9ae521ad82862e6d32b414b4f5bd.
//
// Solidity: event BidPlaced(uint64 orderId, uint256 bidPrice, address bidder)
func (_OrderMatching *OrderMatchingFilterer) ParseBidPlaced(log types.Log) (*OrderMatchingBidPlaced, error) {
	event := new(OrderMatchingBidPlaced)
	if err := _OrderMatching.contract.UnpackLog(event, "BidPlaced", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMatchingOrderClosedIterator is returned from FilterOrderClosed and is used to iterate over the raw logs and unpacked data for OrderClosed events raised by the OrderMatching contract.
type OrderMatchingOrderClosedIterator struct {
	Event *OrderMatchingOrderClosed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMatchingOrderClosedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMatchingOrderClosed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMatchingOrderClosed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMatchingOrderClosedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMatchingOrderClosedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMatchingOrderClosed represents a OrderClosed event raised by the OrderMatching contract.
type OrderMatchingOrderClosed struct {
	OrderId         uint64
	ProviderAddress common.Address
	TenantAddress   common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterOrderClosed is a free log retrieval operation binding the contract event 0xe200291efe00263f5b00da992cddbf04dc5db5dbb370a57905e9b12396202f71.
//
// Solidity: event OrderClosed(uint64 orderId, address providerAddress, address tenantAddress)
func (_OrderMatching *OrderMatchingFilterer) FilterOrderClosed(opts *bind.FilterOpts) (*OrderMatchingOrderClosedIterator, error) {

	logs, sub, err := _OrderMatching.contract.FilterLogs(opts, "OrderClosed")
	if err != nil {
		return nil, err
	}
	return &OrderMatchingOrderClosedIterator{contract: _OrderMatching.contract, event: "OrderClosed", logs: logs, sub: sub}, nil
}

// WatchOrderClosed is a free log subscription operation binding the contract event 0xe200291efe00263f5b00da992cddbf04dc5db5dbb370a57905e9b12396202f71.
//
// Solidity: event OrderClosed(uint64 orderId, address providerAddress, address tenantAddress)
func (_OrderMatching *OrderMatchingFilterer) WatchOrderClosed(opts *bind.WatchOpts, sink chan<- *OrderMatchingOrderClosed) (event.Subscription, error) {

	logs, sub, err := _OrderMatching.contract.WatchLogs(opts, "OrderClosed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMatchingOrderClosed)
				if err := _OrderMatching.contract.UnpackLog(event, "OrderClosed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderClosed is a log parse operation binding the contract event 0xe200291efe00263f5b00da992cddbf04dc5db5dbb370a57905e9b12396202f71.
//
// Solidity: event OrderClosed(uint64 orderId, address providerAddress, address tenantAddress)
func (_OrderMatching *OrderMatchingFilterer) ParseOrderClosed(log types.Log) (*OrderMatchingOrderClosed, error) {
	event := new(OrderMatchingOrderClosed)
	if err := _OrderMatching.contract.UnpackLog(event, "OrderClosed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMatchingOrderCreatedIterator is returned from FilterOrderCreated and is used to iterate over the raw logs and unpacked data for OrderCreated events raised by the OrderMatching contract.
type OrderMatchingOrderCreatedIterator struct {
	Event *OrderMatchingOrderCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMatchingOrderCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMatchingOrderCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMatchingOrderCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMatchingOrderCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMatchingOrderCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMatchingOrderCreated represents a OrderCreated event raised by the OrderMatching contract.
type OrderMatchingOrderCreated struct {
	OrderId uint64
	Creator common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderCreated is a free log retrieval operation binding the contract event 0xf6d615e0ac14f850566a4da04d15354f4cb2905914851da711769c53418d9389.
//
// Solidity: event OrderCreated(uint64 orderId, address creator)
func (_OrderMatching *OrderMatchingFilterer) FilterOrderCreated(opts *bind.FilterOpts) (*OrderMatchingOrderCreatedIterator, error) {

	logs, sub, err := _OrderMatching.contract.FilterLogs(opts, "OrderCreated")
	if err != nil {
		return nil, err
	}
	return &OrderMatchingOrderCreatedIterator{contract: _OrderMatching.contract, event: "OrderCreated", logs: logs, sub: sub}, nil
}

// WatchOrderCreated is a free log subscription operation binding the contract event 0xf6d615e0ac14f850566a4da04d15354f4cb2905914851da711769c53418d9389.
//
// Solidity: event OrderCreated(uint64 orderId, address creator)
func (_OrderMatching *OrderMatchingFilterer) WatchOrderCreated(opts *bind.WatchOpts, sink chan<- *OrderMatchingOrderCreated) (event.Subscription, error) {

	logs, sub, err := _OrderMatching.contract.WatchLogs(opts, "OrderCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMatchingOrderCreated)
				if err := _OrderMatching.contract.UnpackLog(event, "OrderCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderCreated is a log parse operation binding the contract event 0xf6d615e0ac14f850566a4da04d15354f4cb2905914851da711769c53418d9389.
//
// Solidity: event OrderCreated(uint64 orderId, address creator)
func (_OrderMatching *OrderMatchingFilterer) ParseOrderCreated(log types.Log) (*OrderMatchingOrderCreated, error) {
	event := new(OrderMatchingOrderCreated)
	if err := _OrderMatching.contract.UnpackLog(event, "OrderCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMatchingOrderMatchedIterator is returned from FilterOrderMatched and is used to iterate over the raw logs and unpacked data for OrderMatched events raised by the OrderMatching contract.
type OrderMatchingOrderMatchedIterator struct {
	Event *OrderMatchingOrderMatched // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMatchingOrderMatchedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMatchingOrderMatched)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMatchingOrderMatched)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMatchingOrderMatchedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMatchingOrderMatchedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMatchingOrderMatched represents a OrderMatched event raised by the OrderMatching contract.
type OrderMatchingOrderMatched struct {
	OrderId         uint64
	ProviderAddress common.Address
	ProviderId      *big.Int
	AcceptedPrice   *big.Int
	Creator         common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterOrderMatched is a free log retrieval operation binding the contract event 0x34a0a9be1e394eebf0df0c0a87e3274087ba73ca31bc3aad57ba3b3c1964e57a.
//
// Solidity: event OrderMatched(uint64 orderId, address providerAddress, uint256 providerId, uint256 acceptedPrice, address creator)
func (_OrderMatching *OrderMatchingFilterer) FilterOrderMatched(opts *bind.FilterOpts) (*OrderMatchingOrderMatchedIterator, error) {

	logs, sub, err := _OrderMatching.contract.FilterLogs(opts, "OrderMatched")
	if err != nil {
		return nil, err
	}
	return &OrderMatchingOrderMatchedIterator{contract: _OrderMatching.contract, event: "OrderMatched", logs: logs, sub: sub}, nil
}

// WatchOrderMatched is a free log subscription operation binding the contract event 0x34a0a9be1e394eebf0df0c0a87e3274087ba73ca31bc3aad57ba3b3c1964e57a.
//
// Solidity: event OrderMatched(uint64 orderId, address providerAddress, uint256 providerId, uint256 acceptedPrice, address creator)
func (_OrderMatching *OrderMatchingFilterer) WatchOrderMatched(opts *bind.WatchOpts, sink chan<- *OrderMatchingOrderMatched) (event.Subscription, error) {

	logs, sub, err := _OrderMatching.contract.WatchLogs(opts, "OrderMatched")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMatchingOrderMatched)
				if err := _OrderMatching.contract.UnpackLog(event, "OrderMatched", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderMatched is a log parse operation binding the contract event 0x34a0a9be1e394eebf0df0c0a87e3274087ba73ca31bc3aad57ba3b3c1964e57a.
//
// Solidity: event OrderMatched(uint64 orderId, address providerAddress, uint256 providerId, uint256 acceptedPrice, address creator)
func (_OrderMatching *OrderMatchingFilterer) ParseOrderMatched(log types.Log) (*OrderMatchingOrderMatched, error) {
	event := new(OrderMatchingOrderMatched)
	if err := _OrderMatching.contract.UnpackLog(event, "OrderMatched", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
