// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package OrderMatching

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// OrderMatchingInitialOrder is an auto generated low-level Go binding around an user-defined struct.
type OrderMatchingInitialOrder struct {
	Id            uint64
	Region        string
	Uptime        uint64
	Reputation    uint64
	Slashes       uint64
	MaxPrice      *big.Int
	Token         string
	Creator       common.Address
	State         uint8
	Specs         OrderMatchingSpecs
	Version       string
	CreationBlock *big.Int
}

// OrderMatchingPlacementRequirement is an auto generated low-level Go binding around an user-defined struct.
type OrderMatchingPlacementRequirement struct {
	ProviderWallets []common.Address
	Attributes      []string
}

// OrderMatchingSpecs is an auto generated low-level Go binding around an user-defined struct.
type OrderMatchingSpecs struct {
	PlacementRequirement OrderMatchingPlacementRequirement
	Resources            string
}

// OrderMatchingMetaData contains all meta data concerning the OrderMatching contract.
var OrderMatchingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nodeProviderRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authorizedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAuthorizedAddress\",\"type\":\"address\"}],\"name\":\"AuthorizedAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"orderId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"orderId\",\"type\":\"uint64\"}],\"name\":\"OrderClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"orderId\",\"type\":\"uint64\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"orderId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"providerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"providerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acceptedPrice\",\"type\":\"uint256\"}],\"name\":\"OrderMatched\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authorizedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"orderId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_orderId\",\"type\":\"uint64\"}],\"name\":\"closeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_region\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_uptime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_reputation\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_slashes\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_token\",\"type\":\"string\"},{\"components\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"providerWallets\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"attributes\",\"type\":\"string[]\"}],\"internalType\":\"structOrderMatching.PlacementRequirement\",\"name\":\"placementRequirement\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"resources\",\"type\":\"string\"}],\"internalType\":\"structOrderMatching.Specs\",\"name\":\"_spec\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_orderId\",\"type\":\"uint64\"}],\"name\":\"getOrderById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"uptime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"reputation\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slashes\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"enumOrderMatching.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"providerWallets\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"attributes\",\"type\":\"string[]\"}],\"internalType\":\"structOrderMatching.PlacementRequirement\",\"name\":\"placementRequirement\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"resources\",\"type\":\"string\"}],\"internalType\":\"structOrderMatching.Specs\",\"name\":\"specs\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationBlock\",\"type\":\"uint256\"}],\"internalType\":\"structOrderMatching.InitialOrder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_providerAddress\",\"type\":\"address\"}],\"name\":\"getOrderByProvider\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_orderId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_providerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_acceptedPrice\",\"type\":\"uint256\"}],\"name\":\"matchOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"matchedOrders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"providerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"providerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptedPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeProviderRegistry\",\"outputs\":[{\"internalType\":\"contractINodeProviderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"uptime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"reputation\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slashes\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"enumOrderMatching.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"providerWallets\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"attributes\",\"type\":\"string[]\"}],\"internalType\":\"structOrderMatching.PlacementRequirement\",\"name\":\"placementRequirement\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"resources\",\"type\":\"string\"}],\"internalType\":\"structOrderMatching.Specs\",\"name\":\"specs\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_orderId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_bidPrice\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAuthorizedAddress\",\"type\":\"address\"}],\"name\":\"updateAuthorizedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405260015f806101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550348015610037575f80fd5b5060405161389e38038061389e8339818101604052810190610059919061017e565b3360055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160075f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506101bc565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61014d82610124565b9050919050565b61015d81610143565b8114610167575f80fd5b50565b5f8151905061017881610154565b92915050565b5f806040838503121561019457610193610120565b5b5f6101a18582860161016a565b92505060206101b28582860161016a565b9150509250929050565b6136d5806101c95f395ff3fe608060405234801561000f575f80fd5b50600436106100cd575f3560e01c8063638d7dec1161008a5780638da5cb5b116100645780638da5cb5b14610211578063a469dffa1461022f578063b930807d1461026a578063fd2e5a231461029a576100cd565b8063638d7dec146101a75780636582972e146101d75780637a544ad3146101f5576100cd565b806328d389bc146100d15780633975e614146100ed57806347d4f8f21461011f5780634fd2edbb146101515780635539d4001461016d578063571810da1461018b575b5f80fd5b6100eb60048036038101906100e69190611f03565b6102b6565b005b61010760048036038101906101029190611f6b565b6103bf565b60405161011693929190611fbd565b60405180910390f35b6101396004803603810190610134919061201c565b610404565b60405161014893929190612069565b60405180910390f35b61016b6004803603810190610166919061209e565b610476565b005b6101756108e3565b60405161018291906120ee565b60405180910390f35b6101a560048036038101906101a091906124f7565b610908565b005b6101c160048036038101906101bc9190611f03565b610b7f565b6040516101ce91906126cf565b60405180910390f35b6101df610c45565b6040516101ec919061274a565b60405180910390f35b61020f600480360381019061020a9190611f6b565b610c6a565b005b610219610f48565b60405161022691906120ee565b60405180910390f35b61024960048036038101906102449190611f6b565b610f6d565b6040516102619c9b9a99989796959493929190612a72565b60405180910390f35b610284600480360381019061027f9190611f6b565b6113e0565b6040516102919190612cbb565b60405180910390f35b6102b460048036038101906102af919061201c565b61194e565b005b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033c90612d4b565b60405180910390fd5b8060065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fe12f594f8990d16225e1238de64b5ef16fbe78fbb1a70f64e3a82274e9554c0a816040516103b491906120ee565b60405180910390a150565b6003602052805f5260405f205f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b6002602052815f5260405f20818154811061041d575f80fd5b905f5260205f2090600302015f9150915050805f015f9054906101000a900467ffffffffffffffff1690806001015490806002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fc90612dd9565b60405180910390fd5b5f60015f8567ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff160361058b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058290612e41565b60405180910390fd5b5f600281111561059e5761059d6127c3565b5b60015f8567ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f2060050160149054906101000a900460ff1660028111156105e6576105e56127c3565b5b14610626576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061d90612ea9565b60405180910390fd5b5f8060075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166368efbce3856040518263ffffffff1660e01b815260040161068291906120ee565b5f60405180830381865afa15801561069c573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f820116820180604052508101906106c49190612f92565b9350505091508061070a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070190613082565b60405180910390fd5b5f60405180606001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018581525090508060035f8867ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201559050506001805f8867ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f2060050160146101000a81548160ff0219169083600281111561080a576108096127c3565b5b021790555060045f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2086908060018154018082558091505060019003905f5260205f2090600491828204019190066008029091909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507ff50b3cb342f0081a2c26e7b8816717154b65d850ef73d68a185a3613c719f7b4868685876040516108d394939291906130a0565b60405180910390a1505050505050565b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f805f81819054906101000a900467ffffffffffffffff168092919061092d90613110565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555090505f60015f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f20905081815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550898160010190816109b79190613330565b5088816002015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550878160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550868160020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555085816003018190555084816004019081610a529190613330565b5033816005015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160050160146101000a81548160ff02191690836002811115610abd57610abc6127c3565b5b021790555083816006015f820151815f015f820151815f019080519060200190610ae8929190611c56565b506020820151816001019080519060200190610b05929190611cdd565b5050506020820151816002019081610b1d9190613330565b5090505082816009019081610b329190613330565b504381600a01819055507fedcc895bbb0933b024b35f376f6d52ad824c61c10d6c463841fc61daf47e37de82604051610b6b91906133ff565b60405180910390a150505050505050505050565b606060045f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805480602002602001604051908101604052809291908181526020018280548015610c3957602002820191905f5260205f20905f905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411610bf45790505b50505050509050919050565b60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f60015f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1603610cf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce790612e41565b60405180910390fd5b60016002811115610d0457610d036127c3565b5b60015f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f2060050160149054906101000a900460ff166002811115610d4c57610d4b6127c3565b5b14610d8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8390613462565b60405180910390fd5b60015f8267ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f206005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610e7e575060035f8267ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610ebd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb4906134f0565b60405180910390fd5b600260015f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f2060050160146101000a81548160ff02191690836002811115610f0957610f086127c3565b5b02179055507f3a5b75e7dbdc051c7b1554f8abe12c04268e5fc8b3fb7cdb71fb826edd1aa47681604051610f3d91906133ff565b60405180910390a150565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001602052805f5260405f205f91509050805f015f9054906101000a900467ffffffffffffffff1690806001018054610fa59061316c565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd19061316c565b801561101c5780601f10610ff35761010080835404028352916020019161101c565b820191905f5260205f20905b815481529060010190602001808311610fff57829003601f168201915b505050505090806002015f9054906101000a900467ffffffffffffffff16908060020160089054906101000a900467ffffffffffffffff16908060020160109054906101000a900467ffffffffffffffff16908060030154908060040180546110849061316c565b80601f01602080910402602001604051908101604052809291908181526020018280546110b09061316c565b80156110fb5780601f106110d2576101008083540402835291602001916110fb565b820191905f5260205f20905b8154815290600101906020018083116110de57829003601f168201915b505050505090806005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160149054906101000a900460ff1690806006016040518060400160405290815f82016040518060400160405290815f82018054806020026020016040519081016040528092919081815260200182805480156111d857602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161118f575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020015f905b828210156112ad578382905f5260205f200180546112229061316c565b80601f016020809104026020016040519081016040528092919081815260200182805461124e9061316c565b80156112995780601f1061127057610100808354040283529160200191611299565b820191905f5260205f20905b81548152906001019060200180831161127c57829003601f168201915b505050505081526020019060010190611205565b505050508152505081526020016002820180546112c99061316c565b80601f01602080910402602001604051908101604052809291908181526020018280546112f59061316c565b80156113405780601f1061131757610100808354040283529160200191611340565b820191905f5260205f20905b81548152906001019060200180831161132357829003601f168201915b505050505081525050908060090180546113599061316c565b80601f01602080910402602001604051908101604052809291908181526020018280546113859061316c565b80156113d05780601f106113a7576101008083540402835291602001916113d0565b820191905f5260205f20905b8154815290600101906020018083116113b357829003601f168201915b50505050509080600a015490508c565b6113e8611d34565b60015f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f20604051806101800160405290815f82015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820180546114599061316c565b80601f01602080910402602001604051908101604052809291908181526020018280546114859061316c565b80156114d05780601f106114a7576101008083540402835291602001916114d0565b820191905f5260205f20905b8154815290600101906020018083116114b357829003601f168201915b50505050508152602001600282015f9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152602001600382015481526020016004820180546115889061316c565b80601f01602080910402602001604051908101604052809291908181526020018280546115b49061316c565b80156115ff5780601f106115d6576101008083540402835291602001916115ff565b820191905f5260205f20905b8154815290600101906020018083116115e257829003601f168201915b50505050508152602001600582015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160149054906101000a900460ff166002811115611682576116816127c3565b5b6002811115611694576116936127c3565b5b8152602001600682016040518060400160405290815f82016040518060400160405290815f820180548060200260200160405190810160405280929190818152602001828054801561173857602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116116ef575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020015f905b8282101561180d578382905f5260205f200180546117829061316c565b80601f01602080910402602001604051908101604052809291908181526020018280546117ae9061316c565b80156117f95780601f106117d0576101008083540402835291602001916117f9565b820191905f5260205f20905b8154815290600101906020018083116117dc57829003601f168201915b505050505081526020019060010190611765565b505050508152505081526020016002820180546118299061316c565b80601f01602080910402602001604051908101604052809291908181526020018280546118559061316c565b80156118a05780601f10611877576101008083540402835291602001916118a0565b820191905f5260205f20905b81548152906001019060200180831161188357829003601f168201915b50505050508152505081526020016009820180546118bd9061316c565b80601f01602080910402602001604051908101604052809291908181526020018280546118e99061316c565b80156119345780601f1061190b57610100808354040283529160200191611934565b820191905f5260205f20905b81548152906001019060200180831161191757829003601f168201915b50505050508152602001600a820154815250509050919050565b60015f8367ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f20600301548111156119b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b090613558565b60405180910390fd5b600860015f8467ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f20600a01546119ee9190613576565b431115611a30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a27906135f3565b60405180910390fd5b5f60075f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166368efbce3336040518263ffffffff1660e01b8152600401611a8b91906120ee565b5f60405180830381865afa158015611aa5573d5f803e3d5ffd5b505050506040513d5f823e3d601f19601f82011682018060405250810190611acd9190612f92565b935050505080611b12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0990613681565b60405180910390fd5b60025f8467ffffffffffffffff1667ffffffffffffffff1681526020019081526020015f2060405180606001604052808567ffffffffffffffff1681526020018481526020013373ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003905f5260205f2090600302015f909190919091505f820151815f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550602082015181600101556040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050507f3a15efc4974c5d6dc4b1c18daba29785cc2d9ae521ad82862e6d32b414b4f5bd838333604051611c4993929190612069565b60405180910390a1505050565b828054828255905f5260205f20908101928215611ccc579160200282015b82811115611ccb578251825f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611c74565b5b509050611cd99190611de3565b5090565b828054828255905f5260205f20908101928215611d23579160200282015b82811115611d22578251829081611d129190613330565b5091602001919060010190611cfb565b5b509050611d309190611dfe565b5090565b6040518061018001604052805f67ffffffffffffffff168152602001606081526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f8152602001606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f6002811115611dc357611dc26127c3565b5b8152602001611dd0611e21565b8152602001606081526020015f81525090565b5b80821115611dfa575f815f905550600101611de4565b5090565b5b80821115611e1d575f8181611e149190611e41565b50600101611dff565b5090565b6040518060400160405280611e34611e7e565b8152602001606081525090565b508054611e4d9061316c565b5f825580601f10611e5e5750611e7b565b601f0160209004905f5260205f2090810190611e7a9190611de3565b5b50565b604051806040016040528060608152602001606081525090565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611ed282611ea9565b9050919050565b611ee281611ec8565b8114611eec575f80fd5b50565b5f81359050611efd81611ed9565b92915050565b5f60208284031215611f1857611f17611ea1565b5b5f611f2584828501611eef565b91505092915050565b5f67ffffffffffffffff82169050919050565b611f4a81611f2e565b8114611f54575f80fd5b50565b5f81359050611f6581611f41565b92915050565b5f60208284031215611f8057611f7f611ea1565b5b5f611f8d84828501611f57565b91505092915050565b611f9f81611ec8565b82525050565b5f819050919050565b611fb781611fa5565b82525050565b5f606082019050611fd05f830186611f96565b611fdd6020830185611fae565b611fea6040830184611fae565b949350505050565b611ffb81611fa5565b8114612005575f80fd5b50565b5f8135905061201681611ff2565b92915050565b5f806040838503121561203257612031611ea1565b5b5f61203f85828601611f57565b925050602061205085828601612008565b9150509250929050565b61206381611f2e565b82525050565b5f60608201905061207c5f83018661205a565b6120896020830185611fae565b6120966040830184611f96565b949350505050565b5f805f606084860312156120b5576120b4611ea1565b5b5f6120c286828701611f57565b93505060206120d386828701611eef565b92505060406120e486828701612008565b9150509250925092565b5f6020820190506121015f830184611f96565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6121558261210f565b810181811067ffffffffffffffff821117156121745761217361211f565b5b80604052505050565b5f612186611e98565b9050612192828261214c565b919050565b5f67ffffffffffffffff8211156121b1576121b061211f565b5b6121ba8261210f565b9050602081019050919050565b828183375f83830152505050565b5f6121e76121e284612197565b61217d565b9050828152602081018484840111156122035761220261210b565b5b61220e8482856121c7565b509392505050565b5f82601f83011261222a57612229612107565b5b813561223a8482602086016121d5565b91505092915050565b5f80fd5b5f80fd5b5f67ffffffffffffffff8211156122655761226461211f565b5b602082029050602081019050919050565b5f80fd5b5f61228c6122878461224b565b61217d565b905080838252602082019050602084028301858111156122af576122ae612276565b5b835b818110156122d857806122c48882611eef565b8452602084019350506020810190506122b1565b5050509392505050565b5f82601f8301126122f6576122f5612107565b5b813561230684826020860161227a565b91505092915050565b5f67ffffffffffffffff8211156123295761232861211f565b5b602082029050602081019050919050565b5f61234c6123478461230f565b61217d565b9050808382526020820190506020840283018581111561236f5761236e612276565b5b835b818110156123b657803567ffffffffffffffff81111561239457612393612107565b5b8086016123a18982612216565b85526020850194505050602081019050612371565b5050509392505050565b5f82601f8301126123d4576123d3612107565b5b81356123e484826020860161233a565b91505092915050565b5f6040828403121561240257612401612243565b5b61240c604061217d565b90505f82013567ffffffffffffffff81111561242b5761242a612247565b5b612437848285016122e2565b5f83015250602082013567ffffffffffffffff81111561245a57612459612247565b5b612466848285016123c0565b60208301525092915050565b5f6040828403121561248757612486612243565b5b612491604061217d565b90505f82013567ffffffffffffffff8111156124b0576124af612247565b5b6124bc848285016123ed565b5f83015250602082013567ffffffffffffffff8111156124df576124de612247565b5b6124eb84828501612216565b60208301525092915050565b5f805f805f805f80610100898b03121561251457612513611ea1565b5b5f89013567ffffffffffffffff81111561253157612530611ea5565b5b61253d8b828c01612216565b985050602061254e8b828c01611f57565b975050604061255f8b828c01611f57565b96505060606125708b828c01611f57565b95505060806125818b828c01612008565b94505060a089013567ffffffffffffffff8111156125a2576125a1611ea5565b5b6125ae8b828c01612216565b93505060c089013567ffffffffffffffff8111156125cf576125ce611ea5565b5b6125db8b828c01612472565b92505060e089013567ffffffffffffffff8111156125fc576125fb611ea5565b5b6126088b828c01612216565b9150509295985092959890939650565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61264a81611f2e565b82525050565b5f61265b8383612641565b60208301905092915050565b5f602082019050919050565b5f61267d82612618565b6126878185612622565b935061269283612632565b805f5b838110156126c25781516126a98882612650565b97506126b483612667565b925050600181019050612695565b5085935050505092915050565b5f6020820190508181035f8301526126e78184612673565b905092915050565b5f819050919050565b5f61271261270d61270884611ea9565b6126ef565b611ea9565b9050919050565b5f612723826126f8565b9050919050565b5f61273482612719565b9050919050565b6127448161272a565b82525050565b5f60208201905061275d5f83018461273b565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f61279582612763565b61279f818561276d565b93506127af81856020860161277d565b6127b88161210f565b840191505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60038110612801576128006127c3565b5b50565b5f819050612811826127f0565b919050565b5f61282082612804565b9050919050565b61283081612816565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61286881611ec8565b82525050565b5f612879838361285f565b60208301905092915050565b5f602082019050919050565b5f61289b82612836565b6128a58185612840565b93506128b083612850565b805f5b838110156128e05781516128c7888261286e565b97506128d283612885565b9250506001810190506128b3565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f61293082612763565b61293a8185612916565b935061294a81856020860161277d565b6129538161210f565b840191505092915050565b5f6129698383612926565b905092915050565b5f602082019050919050565b5f612987826128ed565b61299181856128f7565b9350836020820285016129a385612907565b805f5b858110156129de57848403895281516129bf858261295e565b94506129ca83612971565b925060208a019950506001810190506129a6565b50829750879550505050505092915050565b5f604083015f8301518482035f860152612a0a8282612891565b91505060208301518482036020860152612a24828261297d565b9150508091505092915050565b5f604083015f8301518482035f860152612a4b82826129f0565b91505060208301518482036020860152612a658282612926565b9150508091505092915050565b5f61018082019050612a865f83018f61205a565b8181036020830152612a98818e61278b565b9050612aa7604083018d61205a565b612ab4606083018c61205a565b612ac1608083018b61205a565b612ace60a083018a611fae565b81810360c0830152612ae0818961278b565b9050612aef60e0830188611f96565b612afd610100830187612827565b818103610120830152612b108186612a31565b9050818103610140830152612b25818561278b565b9050612b35610160830184611fae565b9d9c50505050505050505050505050565b612b4f81611fa5565b82525050565b612b5e81612816565b82525050565b5f604083015f8301518482035f860152612b7e82826129f0565b91505060208301518482036020860152612b988282612926565b9150508091505092915050565b5f61018083015f830151612bbb5f860182612641565b5060208301518482036020860152612bd38282612926565b9150506040830151612be86040860182612641565b506060830151612bfb6060860182612641565b506080830151612c0e6080860182612641565b5060a0830151612c2160a0860182612b46565b5060c083015184820360c0860152612c398282612926565b91505060e0830151612c4e60e086018261285f565b50610100830151612c63610100860182612b55565b50610120830151848203610120860152612c7d8282612b64565b915050610140830151848203610140860152612c998282612926565b915050610160830151612cb0610160860182612b46565b508091505092915050565b5f6020820190508181035f830152612cd38184612ba5565b905092915050565b7f4f6e6c79206f776e65722063616e20706572666f726d207468697320616374695f8201527f6f6e000000000000000000000000000000000000000000000000000000000000602082015250565b5f612d3560228361276d565b9150612d4082612cdb565b604082019050919050565b5f6020820190508181035f830152612d6281612d29565b9050919050565b7f4f6e6c7920617574686f72697a656420616464726573732063616e20706572665f8201527f6f726d207468697320616374696f6e0000000000000000000000000000000000602082015250565b5f612dc3602f8361276d565b9150612dce82612d69565b604082019050919050565b5f6020820190508181035f830152612df081612db7565b9050919050565b7f4f7264657220646f6573206e6f742065786973740000000000000000000000005f82015250565b5f612e2b60148361276d565b9150612e3682612df7565b602082019050919050565b5f6020820190508181035f830152612e5881612e1f565b9050919050565b7f4f72646572206973206e6f74206f70656e20666f72206d61746368696e6700005f82015250565b5f612e93601e8361276d565b9150612e9e82612e5f565b602082019050919050565b5f6020820190508181035f830152612ec081612e87565b9050919050565b5f81519050612ed581611ff2565b92915050565b5f612eed612ee884612197565b61217d565b905082815260208101848484011115612f0957612f0861210b565b5b612f1484828561277d565b509392505050565b5f82601f830112612f3057612f2f612107565b5b8151612f40848260208601612edb565b91505092915050565b5f81519050612f5781611ed9565b92915050565b5f8115159050919050565b612f7181612f5d565b8114612f7b575f80fd5b50565b5f81519050612f8c81612f68565b92915050565b5f805f8060808587031215612faa57612fa9611ea1565b5b5f612fb787828801612ec7565b945050602085015167ffffffffffffffff811115612fd857612fd7611ea5565b5b612fe487828801612f1c565b9350506040612ff587828801612f49565b925050606061300687828801612f7e565b91505092959194509250565b7f50726f7669646572206973206e6f7420616e20616374697665206e6f646520705f8201527f726f766964657200000000000000000000000000000000000000000000000000602082015250565b5f61306c60278361276d565b915061307782613012565b604082019050919050565b5f6020820190508181035f83015261309981613060565b9050919050565b5f6080820190506130b35f83018761205a565b6130c06020830186611f96565b6130cd6040830185611fae565b6130da6060830184611fae565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61311a82611f2e565b915067ffffffffffffffff8203613134576131336130e3565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061318357607f821691505b6020821081036131965761319561313f565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026131f87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826131bd565b61320286836131bd565b95508019841693508086168417925050509392505050565b5f61323461322f61322a84611fa5565b6126ef565b611fa5565b9050919050565b5f819050919050565b61324d8361321a565b6132616132598261323b565b8484546131c9565b825550505050565b5f90565b613275613269565b613280818484613244565b505050565b5b818110156132a3576132985f8261326d565b600181019050613286565b5050565b601f8211156132e8576132b98161319c565b6132c2846131ae565b810160208510156132d1578190505b6132e56132dd856131ae565b830182613285565b50505b505050565b5f82821c905092915050565b5f6133085f19846008026132ed565b1980831691505092915050565b5f61332083836132f9565b9150826002028217905092915050565b61333982612763565b67ffffffffffffffff8111156133525761335161211f565b5b61335c825461316c565b6133678282856132a7565b5f60209050601f831160018114613398575f8415613386578287015190505b6133908582613315565b8655506133f7565b601f1984166133a68661319c565b5f5b828110156133cd578489015182556001820191506020850194506020810190506133a8565b868310156133ea57848901516133e6601f8916826132f9565b8355505b6001600288020188555050505b505050505050565b5f6020820190506134125f83018461205a565b92915050565b7f4f72646572206973206e6f7420616374697665000000000000000000000000005f82015250565b5f61344c60138361276d565b915061345782613418565b602082019050919050565b5f6020820190508181035f83015261347981613440565b9050919050565b7f4f6e6c792063726561746f72206f722070726f76696465722063616e20636c6f5f8201527f736520746865206f726465720000000000000000000000000000000000000000602082015250565b5f6134da602c8361276d565b91506134e582613480565b604082019050919050565b5f6020820190508181035f830152613507816134ce565b9050919050565b7f4269642070726963652065786365656473206d617820707269636500000000005f82015250565b5f613542601b8361276d565b915061354d8261350e565b602082019050919050565b5f6020820190508181035f83015261356f81613536565b9050919050565b5f61358082611fa5565b915061358b83611fa5565b92508282019050808211156135a3576135a26130e3565b5b92915050565b7f42696464696e6720706572696f642068617320656e64656400000000000000005f82015250565b5f6135dd60188361276d565b91506135e8826135a9565b602082019050919050565b5f6020820190508181035f83015261360a816135d1565b9050919050565b7f426964646572206973206e6f7420616e20616374697665206e6f64652070726f5f8201527f7669646572000000000000000000000000000000000000000000000000000000602082015250565b5f61366b60258361276d565b915061367682613611565b604082019050919050565b5f6020820190508181035f8301526136988161365f565b905091905056fea264697066735822122006b1b094bb1232b49547aa73eccb0e714ae517cc62431b823e898f15929d11a764736f6c63430008190033",
}

// OrderMatchingABI is the input ABI used to generate the binding from.
// Deprecated: Use OrderMatchingMetaData.ABI instead.
var OrderMatchingABI = OrderMatchingMetaData.ABI

// OrderMatchingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OrderMatchingMetaData.Bin instead.
var OrderMatchingBin = OrderMatchingMetaData.Bin

// DeployOrderMatching deploys a new Ethereum contract, binding an instance of OrderMatching to it.
func DeployOrderMatching(auth *bind.TransactOpts, backend bind.ContractBackend, _nodeProviderRegistryAddress common.Address, _authorizedAddress common.Address) (common.Address, *types.Transaction, *OrderMatching, error) {
	parsed, err := OrderMatchingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OrderMatchingBin), backend, _nodeProviderRegistryAddress, _authorizedAddress)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OrderMatching{OrderMatchingCaller: OrderMatchingCaller{contract: contract}, OrderMatchingTransactor: OrderMatchingTransactor{contract: contract}, OrderMatchingFilterer: OrderMatchingFilterer{contract: contract}}, nil
}

// OrderMatching is an auto generated Go binding around an Ethereum contract.
type OrderMatching struct {
	OrderMatchingCaller     // Read-only binding to the contract
	OrderMatchingTransactor // Write-only binding to the contract
	OrderMatchingFilterer   // Log filterer for contract events
}

// OrderMatchingCaller is an auto generated read-only Go binding around an Ethereum contract.
type OrderMatchingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderMatchingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OrderMatchingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderMatchingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OrderMatchingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrderMatchingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OrderMatchingSession struct {
	Contract     *OrderMatching    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OrderMatchingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OrderMatchingCallerSession struct {
	Contract *OrderMatchingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// OrderMatchingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OrderMatchingTransactorSession struct {
	Contract     *OrderMatchingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// OrderMatchingRaw is an auto generated low-level Go binding around an Ethereum contract.
type OrderMatchingRaw struct {
	Contract *OrderMatching // Generic contract binding to access the raw methods on
}

// OrderMatchingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OrderMatchingCallerRaw struct {
	Contract *OrderMatchingCaller // Generic read-only contract binding to access the raw methods on
}

// OrderMatchingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OrderMatchingTransactorRaw struct {
	Contract *OrderMatchingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOrderMatching creates a new instance of OrderMatching, bound to a specific deployed contract.
func NewOrderMatching(address common.Address, backend bind.ContractBackend) (*OrderMatching, error) {
	contract, err := bindOrderMatching(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OrderMatching{OrderMatchingCaller: OrderMatchingCaller{contract: contract}, OrderMatchingTransactor: OrderMatchingTransactor{contract: contract}, OrderMatchingFilterer: OrderMatchingFilterer{contract: contract}}, nil
}

// NewOrderMatchingCaller creates a new read-only instance of OrderMatching, bound to a specific deployed contract.
func NewOrderMatchingCaller(address common.Address, caller bind.ContractCaller) (*OrderMatchingCaller, error) {
	contract, err := bindOrderMatching(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OrderMatchingCaller{contract: contract}, nil
}

// NewOrderMatchingTransactor creates a new write-only instance of OrderMatching, bound to a specific deployed contract.
func NewOrderMatchingTransactor(address common.Address, transactor bind.ContractTransactor) (*OrderMatchingTransactor, error) {
	contract, err := bindOrderMatching(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OrderMatchingTransactor{contract: contract}, nil
}

// NewOrderMatchingFilterer creates a new log filterer instance of OrderMatching, bound to a specific deployed contract.
func NewOrderMatchingFilterer(address common.Address, filterer bind.ContractFilterer) (*OrderMatchingFilterer, error) {
	contract, err := bindOrderMatching(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OrderMatchingFilterer{contract: contract}, nil
}

// bindOrderMatching binds a generic wrapper to an already deployed contract.
func bindOrderMatching(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := OrderMatchingMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OrderMatching *OrderMatchingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OrderMatching.Contract.OrderMatchingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OrderMatching *OrderMatchingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OrderMatching.Contract.OrderMatchingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OrderMatching *OrderMatchingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OrderMatching.Contract.OrderMatchingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OrderMatching *OrderMatchingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OrderMatching.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OrderMatching *OrderMatchingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OrderMatching.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OrderMatching *OrderMatchingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OrderMatching.Contract.contract.Transact(opts, method, params...)
}

// AuthorizedAddress is a free data retrieval call binding the contract method 0x5539d400.
//
// Solidity: function authorizedAddress() view returns(address)
func (_OrderMatching *OrderMatchingCaller) AuthorizedAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "authorizedAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AuthorizedAddress is a free data retrieval call binding the contract method 0x5539d400.
//
// Solidity: function authorizedAddress() view returns(address)
func (_OrderMatching *OrderMatchingSession) AuthorizedAddress() (common.Address, error) {
	return _OrderMatching.Contract.AuthorizedAddress(&_OrderMatching.CallOpts)
}

// AuthorizedAddress is a free data retrieval call binding the contract method 0x5539d400.
//
// Solidity: function authorizedAddress() view returns(address)
func (_OrderMatching *OrderMatchingCallerSession) AuthorizedAddress() (common.Address, error) {
	return _OrderMatching.Contract.AuthorizedAddress(&_OrderMatching.CallOpts)
}

// Bids is a free data retrieval call binding the contract method 0x47d4f8f2.
//
// Solidity: function bids(uint64 , uint256 ) view returns(uint64 orderId, uint256 bidPrice, address bidder)
func (_OrderMatching *OrderMatchingCaller) Bids(opts *bind.CallOpts, arg0 uint64, arg1 *big.Int) (struct {
	OrderId  uint64
	BidPrice *big.Int
	Bidder   common.Address
}, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "bids", arg0, arg1)

	outstruct := new(struct {
		OrderId  uint64
		BidPrice *big.Int
		Bidder   common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.OrderId = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.BidPrice = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Bidder = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// Bids is a free data retrieval call binding the contract method 0x47d4f8f2.
//
// Solidity: function bids(uint64 , uint256 ) view returns(uint64 orderId, uint256 bidPrice, address bidder)
func (_OrderMatching *OrderMatchingSession) Bids(arg0 uint64, arg1 *big.Int) (struct {
	OrderId  uint64
	BidPrice *big.Int
	Bidder   common.Address
}, error) {
	return _OrderMatching.Contract.Bids(&_OrderMatching.CallOpts, arg0, arg1)
}

// Bids is a free data retrieval call binding the contract method 0x47d4f8f2.
//
// Solidity: function bids(uint64 , uint256 ) view returns(uint64 orderId, uint256 bidPrice, address bidder)
func (_OrderMatching *OrderMatchingCallerSession) Bids(arg0 uint64, arg1 *big.Int) (struct {
	OrderId  uint64
	BidPrice *big.Int
	Bidder   common.Address
}, error) {
	return _OrderMatching.Contract.Bids(&_OrderMatching.CallOpts, arg0, arg1)
}

// GetOrderById is a free data retrieval call binding the contract method 0xb930807d.
//
// Solidity: function getOrderById(uint64 _orderId) view returns((uint64,string,uint64,uint64,uint64,uint256,string,address,uint8,((address[],string[]),string),string,uint256))
func (_OrderMatching *OrderMatchingCaller) GetOrderById(opts *bind.CallOpts, _orderId uint64) (OrderMatchingInitialOrder, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "getOrderById", _orderId)

	if err != nil {
		return *new(OrderMatchingInitialOrder), err
	}

	out0 := *abi.ConvertType(out[0], new(OrderMatchingInitialOrder)).(*OrderMatchingInitialOrder)

	return out0, err

}

// GetOrderById is a free data retrieval call binding the contract method 0xb930807d.
//
// Solidity: function getOrderById(uint64 _orderId) view returns((uint64,string,uint64,uint64,uint64,uint256,string,address,uint8,((address[],string[]),string),string,uint256))
func (_OrderMatching *OrderMatchingSession) GetOrderById(_orderId uint64) (OrderMatchingInitialOrder, error) {
	return _OrderMatching.Contract.GetOrderById(&_OrderMatching.CallOpts, _orderId)
}

// GetOrderById is a free data retrieval call binding the contract method 0xb930807d.
//
// Solidity: function getOrderById(uint64 _orderId) view returns((uint64,string,uint64,uint64,uint64,uint256,string,address,uint8,((address[],string[]),string),string,uint256))
func (_OrderMatching *OrderMatchingCallerSession) GetOrderById(_orderId uint64) (OrderMatchingInitialOrder, error) {
	return _OrderMatching.Contract.GetOrderById(&_OrderMatching.CallOpts, _orderId)
}

// GetOrderByProvider is a free data retrieval call binding the contract method 0x638d7dec.
//
// Solidity: function getOrderByProvider(address _providerAddress) view returns(uint64[])
func (_OrderMatching *OrderMatchingCaller) GetOrderByProvider(opts *bind.CallOpts, _providerAddress common.Address) ([]uint64, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "getOrderByProvider", _providerAddress)

	if err != nil {
		return *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint64)).(*[]uint64)

	return out0, err

}

// GetOrderByProvider is a free data retrieval call binding the contract method 0x638d7dec.
//
// Solidity: function getOrderByProvider(address _providerAddress) view returns(uint64[])
func (_OrderMatching *OrderMatchingSession) GetOrderByProvider(_providerAddress common.Address) ([]uint64, error) {
	return _OrderMatching.Contract.GetOrderByProvider(&_OrderMatching.CallOpts, _providerAddress)
}

// GetOrderByProvider is a free data retrieval call binding the contract method 0x638d7dec.
//
// Solidity: function getOrderByProvider(address _providerAddress) view returns(uint64[])
func (_OrderMatching *OrderMatchingCallerSession) GetOrderByProvider(_providerAddress common.Address) ([]uint64, error) {
	return _OrderMatching.Contract.GetOrderByProvider(&_OrderMatching.CallOpts, _providerAddress)
}

// MatchedOrders is a free data retrieval call binding the contract method 0x3975e614.
//
// Solidity: function matchedOrders(uint64 ) view returns(address providerAddress, uint256 providerId, uint256 acceptedPrice)
func (_OrderMatching *OrderMatchingCaller) MatchedOrders(opts *bind.CallOpts, arg0 uint64) (struct {
	ProviderAddress common.Address
	ProviderId      *big.Int
	AcceptedPrice   *big.Int
}, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "matchedOrders", arg0)

	outstruct := new(struct {
		ProviderAddress common.Address
		ProviderId      *big.Int
		AcceptedPrice   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ProviderAddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.ProviderId = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.AcceptedPrice = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// MatchedOrders is a free data retrieval call binding the contract method 0x3975e614.
//
// Solidity: function matchedOrders(uint64 ) view returns(address providerAddress, uint256 providerId, uint256 acceptedPrice)
func (_OrderMatching *OrderMatchingSession) MatchedOrders(arg0 uint64) (struct {
	ProviderAddress common.Address
	ProviderId      *big.Int
	AcceptedPrice   *big.Int
}, error) {
	return _OrderMatching.Contract.MatchedOrders(&_OrderMatching.CallOpts, arg0)
}

// MatchedOrders is a free data retrieval call binding the contract method 0x3975e614.
//
// Solidity: function matchedOrders(uint64 ) view returns(address providerAddress, uint256 providerId, uint256 acceptedPrice)
func (_OrderMatching *OrderMatchingCallerSession) MatchedOrders(arg0 uint64) (struct {
	ProviderAddress common.Address
	ProviderId      *big.Int
	AcceptedPrice   *big.Int
}, error) {
	return _OrderMatching.Contract.MatchedOrders(&_OrderMatching.CallOpts, arg0)
}

// NodeProviderRegistry is a free data retrieval call binding the contract method 0x6582972e.
//
// Solidity: function nodeProviderRegistry() view returns(address)
func (_OrderMatching *OrderMatchingCaller) NodeProviderRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "nodeProviderRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NodeProviderRegistry is a free data retrieval call binding the contract method 0x6582972e.
//
// Solidity: function nodeProviderRegistry() view returns(address)
func (_OrderMatching *OrderMatchingSession) NodeProviderRegistry() (common.Address, error) {
	return _OrderMatching.Contract.NodeProviderRegistry(&_OrderMatching.CallOpts)
}

// NodeProviderRegistry is a free data retrieval call binding the contract method 0x6582972e.
//
// Solidity: function nodeProviderRegistry() view returns(address)
func (_OrderMatching *OrderMatchingCallerSession) NodeProviderRegistry() (common.Address, error) {
	return _OrderMatching.Contract.NodeProviderRegistry(&_OrderMatching.CallOpts)
}

// Orders is a free data retrieval call binding the contract method 0xa469dffa.
//
// Solidity: function orders(uint64 ) view returns(uint64 id, string region, uint64 uptime, uint64 reputation, uint64 slashes, uint256 maxPrice, string token, address creator, uint8 state, ((address[],string[]),string) specs, string version, uint256 creationBlock)
func (_OrderMatching *OrderMatchingCaller) Orders(opts *bind.CallOpts, arg0 uint64) (struct {
	Id            uint64
	Region        string
	Uptime        uint64
	Reputation    uint64
	Slashes       uint64
	MaxPrice      *big.Int
	Token         string
	Creator       common.Address
	State         uint8
	Specs         OrderMatchingSpecs
	Version       string
	CreationBlock *big.Int
}, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "orders", arg0)

	outstruct := new(struct {
		Id            uint64
		Region        string
		Uptime        uint64
		Reputation    uint64
		Slashes       uint64
		MaxPrice      *big.Int
		Token         string
		Creator       common.Address
		State         uint8
		Specs         OrderMatchingSpecs
		Version       string
		CreationBlock *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.Region = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Uptime = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.Reputation = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.Slashes = *abi.ConvertType(out[4], new(uint64)).(*uint64)
	outstruct.MaxPrice = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.Token = *abi.ConvertType(out[6], new(string)).(*string)
	outstruct.Creator = *abi.ConvertType(out[7], new(common.Address)).(*common.Address)
	outstruct.State = *abi.ConvertType(out[8], new(uint8)).(*uint8)
	outstruct.Specs = *abi.ConvertType(out[9], new(OrderMatchingSpecs)).(*OrderMatchingSpecs)
	outstruct.Version = *abi.ConvertType(out[10], new(string)).(*string)
	outstruct.CreationBlock = *abi.ConvertType(out[11], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Orders is a free data retrieval call binding the contract method 0xa469dffa.
//
// Solidity: function orders(uint64 ) view returns(uint64 id, string region, uint64 uptime, uint64 reputation, uint64 slashes, uint256 maxPrice, string token, address creator, uint8 state, ((address[],string[]),string) specs, string version, uint256 creationBlock)
func (_OrderMatching *OrderMatchingSession) Orders(arg0 uint64) (struct {
	Id            uint64
	Region        string
	Uptime        uint64
	Reputation    uint64
	Slashes       uint64
	MaxPrice      *big.Int
	Token         string
	Creator       common.Address
	State         uint8
	Specs         OrderMatchingSpecs
	Version       string
	CreationBlock *big.Int
}, error) {
	return _OrderMatching.Contract.Orders(&_OrderMatching.CallOpts, arg0)
}

// Orders is a free data retrieval call binding the contract method 0xa469dffa.
//
// Solidity: function orders(uint64 ) view returns(uint64 id, string region, uint64 uptime, uint64 reputation, uint64 slashes, uint256 maxPrice, string token, address creator, uint8 state, ((address[],string[]),string) specs, string version, uint256 creationBlock)
func (_OrderMatching *OrderMatchingCallerSession) Orders(arg0 uint64) (struct {
	Id            uint64
	Region        string
	Uptime        uint64
	Reputation    uint64
	Slashes       uint64
	MaxPrice      *big.Int
	Token         string
	Creator       common.Address
	State         uint8
	Specs         OrderMatchingSpecs
	Version       string
	CreationBlock *big.Int
}, error) {
	return _OrderMatching.Contract.Orders(&_OrderMatching.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OrderMatching *OrderMatchingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OrderMatching.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OrderMatching *OrderMatchingSession) Owner() (common.Address, error) {
	return _OrderMatching.Contract.Owner(&_OrderMatching.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OrderMatching *OrderMatchingCallerSession) Owner() (common.Address, error) {
	return _OrderMatching.Contract.Owner(&_OrderMatching.CallOpts)
}

// CloseOrder is a paid mutator transaction binding the contract method 0x7a544ad3.
//
// Solidity: function closeOrder(uint64 _orderId) returns()
func (_OrderMatching *OrderMatchingTransactor) CloseOrder(opts *bind.TransactOpts, _orderId uint64) (*types.Transaction, error) {
	return _OrderMatching.contract.Transact(opts, "closeOrder", _orderId)
}

// CloseOrder is a paid mutator transaction binding the contract method 0x7a544ad3.
//
// Solidity: function closeOrder(uint64 _orderId) returns()
func (_OrderMatching *OrderMatchingSession) CloseOrder(_orderId uint64) (*types.Transaction, error) {
	return _OrderMatching.Contract.CloseOrder(&_OrderMatching.TransactOpts, _orderId)
}

// CloseOrder is a paid mutator transaction binding the contract method 0x7a544ad3.
//
// Solidity: function closeOrder(uint64 _orderId) returns()
func (_OrderMatching *OrderMatchingTransactorSession) CloseOrder(_orderId uint64) (*types.Transaction, error) {
	return _OrderMatching.Contract.CloseOrder(&_OrderMatching.TransactOpts, _orderId)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x571810da.
//
// Solidity: function createOrder(string _region, uint64 _uptime, uint64 _reputation, uint64 _slashes, uint256 _maxPrice, string _token, ((address[],string[]),string) _spec, string _version) returns()
func (_OrderMatching *OrderMatchingTransactor) CreateOrder(opts *bind.TransactOpts, _region string, _uptime uint64, _reputation uint64, _slashes uint64, _maxPrice *big.Int, _token string, _spec OrderMatchingSpecs, _version string) (*types.Transaction, error) {
	return _OrderMatching.contract.Transact(opts, "createOrder", _region, _uptime, _reputation, _slashes, _maxPrice, _token, _spec, _version)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x571810da.
//
// Solidity: function createOrder(string _region, uint64 _uptime, uint64 _reputation, uint64 _slashes, uint256 _maxPrice, string _token, ((address[],string[]),string) _spec, string _version) returns()
func (_OrderMatching *OrderMatchingSession) CreateOrder(_region string, _uptime uint64, _reputation uint64, _slashes uint64, _maxPrice *big.Int, _token string, _spec OrderMatchingSpecs, _version string) (*types.Transaction, error) {
	return _OrderMatching.Contract.CreateOrder(&_OrderMatching.TransactOpts, _region, _uptime, _reputation, _slashes, _maxPrice, _token, _spec, _version)
}

// CreateOrder is a paid mutator transaction binding the contract method 0x571810da.
//
// Solidity: function createOrder(string _region, uint64 _uptime, uint64 _reputation, uint64 _slashes, uint256 _maxPrice, string _token, ((address[],string[]),string) _spec, string _version) returns()
func (_OrderMatching *OrderMatchingTransactorSession) CreateOrder(_region string, _uptime uint64, _reputation uint64, _slashes uint64, _maxPrice *big.Int, _token string, _spec OrderMatchingSpecs, _version string) (*types.Transaction, error) {
	return _OrderMatching.Contract.CreateOrder(&_OrderMatching.TransactOpts, _region, _uptime, _reputation, _slashes, _maxPrice, _token, _spec, _version)
}

// MatchOrder is a paid mutator transaction binding the contract method 0x4fd2edbb.
//
// Solidity: function matchOrder(uint64 _orderId, address _providerAddress, uint256 _acceptedPrice) returns()
func (_OrderMatching *OrderMatchingTransactor) MatchOrder(opts *bind.TransactOpts, _orderId uint64, _providerAddress common.Address, _acceptedPrice *big.Int) (*types.Transaction, error) {
	return _OrderMatching.contract.Transact(opts, "matchOrder", _orderId, _providerAddress, _acceptedPrice)
}

// MatchOrder is a paid mutator transaction binding the contract method 0x4fd2edbb.
//
// Solidity: function matchOrder(uint64 _orderId, address _providerAddress, uint256 _acceptedPrice) returns()
func (_OrderMatching *OrderMatchingSession) MatchOrder(_orderId uint64, _providerAddress common.Address, _acceptedPrice *big.Int) (*types.Transaction, error) {
	return _OrderMatching.Contract.MatchOrder(&_OrderMatching.TransactOpts, _orderId, _providerAddress, _acceptedPrice)
}

// MatchOrder is a paid mutator transaction binding the contract method 0x4fd2edbb.
//
// Solidity: function matchOrder(uint64 _orderId, address _providerAddress, uint256 _acceptedPrice) returns()
func (_OrderMatching *OrderMatchingTransactorSession) MatchOrder(_orderId uint64, _providerAddress common.Address, _acceptedPrice *big.Int) (*types.Transaction, error) {
	return _OrderMatching.Contract.MatchOrder(&_OrderMatching.TransactOpts, _orderId, _providerAddress, _acceptedPrice)
}

// PlaceBid is a paid mutator transaction binding the contract method 0xfd2e5a23.
//
// Solidity: function placeBid(uint64 _orderId, uint256 _bidPrice) returns()
func (_OrderMatching *OrderMatchingTransactor) PlaceBid(opts *bind.TransactOpts, _orderId uint64, _bidPrice *big.Int) (*types.Transaction, error) {
	return _OrderMatching.contract.Transact(opts, "placeBid", _orderId, _bidPrice)
}

// PlaceBid is a paid mutator transaction binding the contract method 0xfd2e5a23.
//
// Solidity: function placeBid(uint64 _orderId, uint256 _bidPrice) returns()
func (_OrderMatching *OrderMatchingSession) PlaceBid(_orderId uint64, _bidPrice *big.Int) (*types.Transaction, error) {
	return _OrderMatching.Contract.PlaceBid(&_OrderMatching.TransactOpts, _orderId, _bidPrice)
}

// PlaceBid is a paid mutator transaction binding the contract method 0xfd2e5a23.
//
// Solidity: function placeBid(uint64 _orderId, uint256 _bidPrice) returns()
func (_OrderMatching *OrderMatchingTransactorSession) PlaceBid(_orderId uint64, _bidPrice *big.Int) (*types.Transaction, error) {
	return _OrderMatching.Contract.PlaceBid(&_OrderMatching.TransactOpts, _orderId, _bidPrice)
}

// UpdateAuthorizedAddress is a paid mutator transaction binding the contract method 0x28d389bc.
//
// Solidity: function updateAuthorizedAddress(address _newAuthorizedAddress) returns()
func (_OrderMatching *OrderMatchingTransactor) UpdateAuthorizedAddress(opts *bind.TransactOpts, _newAuthorizedAddress common.Address) (*types.Transaction, error) {
	return _OrderMatching.contract.Transact(opts, "updateAuthorizedAddress", _newAuthorizedAddress)
}

// UpdateAuthorizedAddress is a paid mutator transaction binding the contract method 0x28d389bc.
//
// Solidity: function updateAuthorizedAddress(address _newAuthorizedAddress) returns()
func (_OrderMatching *OrderMatchingSession) UpdateAuthorizedAddress(_newAuthorizedAddress common.Address) (*types.Transaction, error) {
	return _OrderMatching.Contract.UpdateAuthorizedAddress(&_OrderMatching.TransactOpts, _newAuthorizedAddress)
}

// UpdateAuthorizedAddress is a paid mutator transaction binding the contract method 0x28d389bc.
//
// Solidity: function updateAuthorizedAddress(address _newAuthorizedAddress) returns()
func (_OrderMatching *OrderMatchingTransactorSession) UpdateAuthorizedAddress(_newAuthorizedAddress common.Address) (*types.Transaction, error) {
	return _OrderMatching.Contract.UpdateAuthorizedAddress(&_OrderMatching.TransactOpts, _newAuthorizedAddress)
}

// OrderMatchingAuthorizedAddressUpdatedIterator is returned from FilterAuthorizedAddressUpdated and is used to iterate over the raw logs and unpacked data for AuthorizedAddressUpdated events raised by the OrderMatching contract.
type OrderMatchingAuthorizedAddressUpdatedIterator struct {
	Event *OrderMatchingAuthorizedAddressUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMatchingAuthorizedAddressUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMatchingAuthorizedAddressUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMatchingAuthorizedAddressUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMatchingAuthorizedAddressUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMatchingAuthorizedAddressUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMatchingAuthorizedAddressUpdated represents a AuthorizedAddressUpdated event raised by the OrderMatching contract.
type OrderMatchingAuthorizedAddressUpdated struct {
	NewAuthorizedAddress common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterAuthorizedAddressUpdated is a free log retrieval operation binding the contract event 0xe12f594f8990d16225e1238de64b5ef16fbe78fbb1a70f64e3a82274e9554c0a.
//
// Solidity: event AuthorizedAddressUpdated(address newAuthorizedAddress)
func (_OrderMatching *OrderMatchingFilterer) FilterAuthorizedAddressUpdated(opts *bind.FilterOpts) (*OrderMatchingAuthorizedAddressUpdatedIterator, error) {

	logs, sub, err := _OrderMatching.contract.FilterLogs(opts, "AuthorizedAddressUpdated")
	if err != nil {
		return nil, err
	}
	return &OrderMatchingAuthorizedAddressUpdatedIterator{contract: _OrderMatching.contract, event: "AuthorizedAddressUpdated", logs: logs, sub: sub}, nil
}

// WatchAuthorizedAddressUpdated is a free log subscription operation binding the contract event 0xe12f594f8990d16225e1238de64b5ef16fbe78fbb1a70f64e3a82274e9554c0a.
//
// Solidity: event AuthorizedAddressUpdated(address newAuthorizedAddress)
func (_OrderMatching *OrderMatchingFilterer) WatchAuthorizedAddressUpdated(opts *bind.WatchOpts, sink chan<- *OrderMatchingAuthorizedAddressUpdated) (event.Subscription, error) {

	logs, sub, err := _OrderMatching.contract.WatchLogs(opts, "AuthorizedAddressUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMatchingAuthorizedAddressUpdated)
				if err := _OrderMatching.contract.UnpackLog(event, "AuthorizedAddressUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorizedAddressUpdated is a log parse operation binding the contract event 0xe12f594f8990d16225e1238de64b5ef16fbe78fbb1a70f64e3a82274e9554c0a.
//
// Solidity: event AuthorizedAddressUpdated(address newAuthorizedAddress)
func (_OrderMatching *OrderMatchingFilterer) ParseAuthorizedAddressUpdated(log types.Log) (*OrderMatchingAuthorizedAddressUpdated, error) {
	event := new(OrderMatchingAuthorizedAddressUpdated)
	if err := _OrderMatching.contract.UnpackLog(event, "AuthorizedAddressUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMatchingBidPlacedIterator is returned from FilterBidPlaced and is used to iterate over the raw logs and unpacked data for BidPlaced events raised by the OrderMatching contract.
type OrderMatchingBidPlacedIterator struct {
	Event *OrderMatchingBidPlaced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMatchingBidPlacedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMatchingBidPlaced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMatchingBidPlaced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMatchingBidPlacedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMatchingBidPlacedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMatchingBidPlaced represents a BidPlaced event raised by the OrderMatching contract.
type OrderMatchingBidPlaced struct {
	OrderId  uint64
	BidPrice *big.Int
	Bidder   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBidPlaced is a free log retrieval operation binding the contract event 0x3a15efc4974c5d6dc4b1c18daba29785cc2d9ae521ad82862e6d32b414b4f5bd.
//
// Solidity: event BidPlaced(uint64 orderId, uint256 bidPrice, address bidder)
func (_OrderMatching *OrderMatchingFilterer) FilterBidPlaced(opts *bind.FilterOpts) (*OrderMatchingBidPlacedIterator, error) {

	logs, sub, err := _OrderMatching.contract.FilterLogs(opts, "BidPlaced")
	if err != nil {
		return nil, err
	}
	return &OrderMatchingBidPlacedIterator{contract: _OrderMatching.contract, event: "BidPlaced", logs: logs, sub: sub}, nil
}

// WatchBidPlaced is a free log subscription operation binding the contract event 0x3a15efc4974c5d6dc4b1c18daba29785cc2d9ae521ad82862e6d32b414b4f5bd.
//
// Solidity: event BidPlaced(uint64 orderId, uint256 bidPrice, address bidder)
func (_OrderMatching *OrderMatchingFilterer) WatchBidPlaced(opts *bind.WatchOpts, sink chan<- *OrderMatchingBidPlaced) (event.Subscription, error) {

	logs, sub, err := _OrderMatching.contract.WatchLogs(opts, "BidPlaced")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMatchingBidPlaced)
				if err := _OrderMatching.contract.UnpackLog(event, "BidPlaced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBidPlaced is a log parse operation binding the contract event 0x3a15efc4974c5d6dc4b1c18daba29785cc2d9ae521ad82862e6d32b414b4f5bd.
//
// Solidity: event BidPlaced(uint64 orderId, uint256 bidPrice, address bidder)
func (_OrderMatching *OrderMatchingFilterer) ParseBidPlaced(log types.Log) (*OrderMatchingBidPlaced, error) {
	event := new(OrderMatchingBidPlaced)
	if err := _OrderMatching.contract.UnpackLog(event, "BidPlaced", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMatchingOrderClosedIterator is returned from FilterOrderClosed and is used to iterate over the raw logs and unpacked data for OrderClosed events raised by the OrderMatching contract.
type OrderMatchingOrderClosedIterator struct {
	Event *OrderMatchingOrderClosed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMatchingOrderClosedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMatchingOrderClosed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMatchingOrderClosed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMatchingOrderClosedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMatchingOrderClosedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMatchingOrderClosed represents a OrderClosed event raised by the OrderMatching contract.
type OrderMatchingOrderClosed struct {
	OrderId uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderClosed is a free log retrieval operation binding the contract event 0x3a5b75e7dbdc051c7b1554f8abe12c04268e5fc8b3fb7cdb71fb826edd1aa476.
//
// Solidity: event OrderClosed(uint64 orderId)
func (_OrderMatching *OrderMatchingFilterer) FilterOrderClosed(opts *bind.FilterOpts) (*OrderMatchingOrderClosedIterator, error) {

	logs, sub, err := _OrderMatching.contract.FilterLogs(opts, "OrderClosed")
	if err != nil {
		return nil, err
	}
	return &OrderMatchingOrderClosedIterator{contract: _OrderMatching.contract, event: "OrderClosed", logs: logs, sub: sub}, nil
}

// WatchOrderClosed is a free log subscription operation binding the contract event 0x3a5b75e7dbdc051c7b1554f8abe12c04268e5fc8b3fb7cdb71fb826edd1aa476.
//
// Solidity: event OrderClosed(uint64 orderId)
func (_OrderMatching *OrderMatchingFilterer) WatchOrderClosed(opts *bind.WatchOpts, sink chan<- *OrderMatchingOrderClosed) (event.Subscription, error) {

	logs, sub, err := _OrderMatching.contract.WatchLogs(opts, "OrderClosed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMatchingOrderClosed)
				if err := _OrderMatching.contract.UnpackLog(event, "OrderClosed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderClosed is a log parse operation binding the contract event 0x3a5b75e7dbdc051c7b1554f8abe12c04268e5fc8b3fb7cdb71fb826edd1aa476.
//
// Solidity: event OrderClosed(uint64 orderId)
func (_OrderMatching *OrderMatchingFilterer) ParseOrderClosed(log types.Log) (*OrderMatchingOrderClosed, error) {
	event := new(OrderMatchingOrderClosed)
	if err := _OrderMatching.contract.UnpackLog(event, "OrderClosed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMatchingOrderCreatedIterator is returned from FilterOrderCreated and is used to iterate over the raw logs and unpacked data for OrderCreated events raised by the OrderMatching contract.
type OrderMatchingOrderCreatedIterator struct {
	Event *OrderMatchingOrderCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMatchingOrderCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMatchingOrderCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMatchingOrderCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMatchingOrderCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMatchingOrderCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMatchingOrderCreated represents a OrderCreated event raised by the OrderMatching contract.
type OrderMatchingOrderCreated struct {
	OrderId uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderCreated is a free log retrieval operation binding the contract event 0xedcc895bbb0933b024b35f376f6d52ad824c61c10d6c463841fc61daf47e37de.
//
// Solidity: event OrderCreated(uint64 orderId)
func (_OrderMatching *OrderMatchingFilterer) FilterOrderCreated(opts *bind.FilterOpts) (*OrderMatchingOrderCreatedIterator, error) {

	logs, sub, err := _OrderMatching.contract.FilterLogs(opts, "OrderCreated")
	if err != nil {
		return nil, err
	}
	return &OrderMatchingOrderCreatedIterator{contract: _OrderMatching.contract, event: "OrderCreated", logs: logs, sub: sub}, nil
}

// WatchOrderCreated is a free log subscription operation binding the contract event 0xedcc895bbb0933b024b35f376f6d52ad824c61c10d6c463841fc61daf47e37de.
//
// Solidity: event OrderCreated(uint64 orderId)
func (_OrderMatching *OrderMatchingFilterer) WatchOrderCreated(opts *bind.WatchOpts, sink chan<- *OrderMatchingOrderCreated) (event.Subscription, error) {

	logs, sub, err := _OrderMatching.contract.WatchLogs(opts, "OrderCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMatchingOrderCreated)
				if err := _OrderMatching.contract.UnpackLog(event, "OrderCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderCreated is a log parse operation binding the contract event 0xedcc895bbb0933b024b35f376f6d52ad824c61c10d6c463841fc61daf47e37de.
//
// Solidity: event OrderCreated(uint64 orderId)
func (_OrderMatching *OrderMatchingFilterer) ParseOrderCreated(log types.Log) (*OrderMatchingOrderCreated, error) {
	event := new(OrderMatchingOrderCreated)
	if err := _OrderMatching.contract.UnpackLog(event, "OrderCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrderMatchingOrderMatchedIterator is returned from FilterOrderMatched and is used to iterate over the raw logs and unpacked data for OrderMatched events raised by the OrderMatching contract.
type OrderMatchingOrderMatchedIterator struct {
	Event *OrderMatchingOrderMatched // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrderMatchingOrderMatchedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrderMatchingOrderMatched)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrderMatchingOrderMatched)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrderMatchingOrderMatchedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrderMatchingOrderMatchedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrderMatchingOrderMatched represents a OrderMatched event raised by the OrderMatching contract.
type OrderMatchingOrderMatched struct {
	OrderId         uint64
	ProviderAddress common.Address
	ProviderId      *big.Int
	AcceptedPrice   *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterOrderMatched is a free log retrieval operation binding the contract event 0xf50b3cb342f0081a2c26e7b8816717154b65d850ef73d68a185a3613c719f7b4.
//
// Solidity: event OrderMatched(uint64 orderId, address providerAddress, uint256 providerId, uint256 acceptedPrice)
func (_OrderMatching *OrderMatchingFilterer) FilterOrderMatched(opts *bind.FilterOpts) (*OrderMatchingOrderMatchedIterator, error) {

	logs, sub, err := _OrderMatching.contract.FilterLogs(opts, "OrderMatched")
	if err != nil {
		return nil, err
	}
	return &OrderMatchingOrderMatchedIterator{contract: _OrderMatching.contract, event: "OrderMatched", logs: logs, sub: sub}, nil
}

// WatchOrderMatched is a free log subscription operation binding the contract event 0xf50b3cb342f0081a2c26e7b8816717154b65d850ef73d68a185a3613c719f7b4.
//
// Solidity: event OrderMatched(uint64 orderId, address providerAddress, uint256 providerId, uint256 acceptedPrice)
func (_OrderMatching *OrderMatchingFilterer) WatchOrderMatched(opts *bind.WatchOpts, sink chan<- *OrderMatchingOrderMatched) (event.Subscription, error) {

	logs, sub, err := _OrderMatching.contract.WatchLogs(opts, "OrderMatched")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrderMatchingOrderMatched)
				if err := _OrderMatching.contract.UnpackLog(event, "OrderMatched", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrderMatched is a log parse operation binding the contract event 0xf50b3cb342f0081a2c26e7b8816717154b65d850ef73d68a185a3613c719f7b4.
//
// Solidity: event OrderMatched(uint64 orderId, address providerAddress, uint256 providerId, uint256 acceptedPrice)
func (_OrderMatching *OrderMatchingFilterer) ParseOrderMatched(log types.Log) (*OrderMatchingOrderMatched, error) {
	event := new(OrderMatchingOrderMatched)
	if err := _OrderMatching.contract.UnpackLog(event, "OrderMatched", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
